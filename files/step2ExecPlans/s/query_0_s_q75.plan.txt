                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261092.17..261092.18 rows=1 width=80) (actual time=1806.234..1806.242 rows=100 loops=1)
   CTE all_sales
     ->  HashAggregate  (cost=258180.45..258805.00 rows=49964 width=60) (actual time=1802.651..1804.168 rows=5161 loops=1)
           Group Key: d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id
           ->  HashAggregate  (cost=239444.03..244440.41 rows=499638 width=56) (actual time=1568.908..1670.983 rows=484968 loops=1)
                 Group Key: d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, ((cs_quantity - COALESCE(cr_return_quantity, 0))), ((cs_ext_sales_price - COALESCE(cr_return_amount, 0.0)))
                 ->  Append  (cost=7709.40..230700.36 rows=499638 width=56) (actual time=63.597..915.961 rows=486567 loops=1)
                       ->  Remote Subquery Scan on all (dn1)  (cost=7709.40..71584.42 rows=142877 width=56) (actual time=63.596..294.557 rows=141880 loops=1)
                       ->  Remote Subquery Scan on all (dn1)  (cost=13209.57..117791.59 rows=285462 width=56) (actual time=80.377..440.949 rows=273040 loops=1)
                       ->  Remote Subquery Scan on all (dn1)  (cost=4351.80..36327.98 rows=71299 width=56) (actual time=38.863..138.294 rows=71647 loops=1)
   ->  Sort  (cost=2287.17..2287.18 rows=1 width=80) (actual time=1806.232..1806.235 rows=100 loops=1)
         Sort Key: ((curr_yr.sales_cnt - prev_yr.sales_cnt)), ((curr_yr.sales_amt - prev_yr.sales_amt))
         Sort Method: quicksort  Memory: 44kB
         ->  Hash Join  (cost=1129.19..2287.16 rows=1 width=80) (actual time=1805.521..1806.190 rows=141 loops=1)
               Hash Cond: ((curr_yr.i_brand_id = prev_yr.i_brand_id) AND (curr_yr.i_class_id = prev_yr.i_class_id) AND (curr_yr.i_category_id = prev_yr.i_category_id) AND (curr_yr.i_manufact_id = prev_yr.i_manufact_id))
               Join Filter: (((curr_yr.sales_cnt)::numeric(17,2) / (prev_yr.sales_cnt)::numeric(17,2)) < 0.9)
               Rows Removed by Join Filter: 454
               ->  CTE Scan on all_sales curr_yr  (cost=0.00..1124.19 rows=250 width=60) (actual time=1802.661..1802.949 rows=885 loops=1)
                     Filter: (d_year = 2002)
                     Rows Removed by Filter: 4276
               ->  Hash  (cost=1124.19..1124.19 rows=250 width=60) (actual time=2.834..2.834 rows=872 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 73kB
                     ->  CTE Scan on all_sales prev_yr  (cost=0.00..1124.19 rows=250 width=60) (actual time=0.001..2.673 rows=873 loops=1)
                           Filter: (d_year = 2001)
                           Rows Removed by Filter: 4288
 Planning time: 1.669 ms
 Execution time: 1812.125 ms
(27 rows)

