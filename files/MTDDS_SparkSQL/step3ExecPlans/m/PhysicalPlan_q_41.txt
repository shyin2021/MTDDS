AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[i_product_name#1292 ASC NULLS FIRST], output=[i_product_name#1292])
   +- HashAggregate(keys=[i_product_name#1292], functions=[], output=[i_product_name#1292])
      +- Exchange hashpartitioning(i_product_name#1292, 200), ENSURE_REQUIREMENTS, [plan_id=91868]
         +- HashAggregate(keys=[i_product_name#1292], functions=[], output=[i_product_name#1292])
            +- Project [i_product_name#1292]
               +- BroadcastHashJoin [i_manufact#1285], [i_manufact#31316], Inner, BuildRight, false
                  :- Project [i_manufact#1285, i_product_name#1292]
                  :  +- Filter (((isnotnull(i_manufact_id#1284) AND (i_manufact_id#1284 >= 739)) AND (i_manufact_id#1284 <= 779)) AND isnotnull(i_manufact#1285))
                  :     +- FileScan parquet spark_catalog.m.item[i_manufact_id#1284,i_manufact#1285,i_product_name#1292] Batched: true, DataFilters: [isnotnull(i_manufact_id#1284), (i_manufact_id#1284 >= 739), (i_manufact_id#1284 <= 779), isnotnu..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), GreaterThanOrEqual(i_manufact_id,739), LessThanOrEqual(i_manufact_id,7..., ReadSchema: struct<i_manufact_id:int,i_manufact:string,i_product_name:string>
                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=91863]
                     +- Project [i_manufact#31316]
                        +- Filter (item_cnt#31299L > 0)
                           +- HashAggregate(keys=[i_manufact#31316], functions=[count(1)], output=[item_cnt#31299L, i_manufact#31316])
                              +- Exchange hashpartitioning(i_manufact#31316, 200), ENSURE_REQUIREMENTS, [plan_id=91858]
                                 +- HashAggregate(keys=[i_manufact#31316], functions=[partial_count(1)], output=[i_manufact#31316, count#31331L])
                                    +- Project [i_manufact#31316]
                                       +- Filter (((((i_category#31314 = Women) AND (((((i_color#31319 = mint) OR (i_color#31319 = almond)) AND ((i_units#31320 = Dozen) OR (i_units#31320 = Carton))) AND ((i_size#31317 = large) OR (i_size#31317 = extra large))) OR ((((i_color#31319 = lime) OR (i_color#31319 = dodger)) AND ((i_units#31320 = Pallet) OR (i_units#31320 = Ounce))) AND ((i_size#31317 = economy) OR (i_size#31317 = medium))))) OR ((i_category#31314 = Men) AND (((((i_color#31319 = salmon) OR (i_color#31319 = navy)) AND ((i_units#31320 = Bunch) OR (i_units#31320 = Oz))) AND ((i_size#31317 = N/A) OR (i_size#31317 = small))) OR ((((i_color#31319 = antique) OR (i_color#31319 = white)) AND ((i_units#31320 = Unknown) OR (i_units#31320 = Tbl))) AND ((i_size#31317 = large) OR (i_size#31317 = extra large)))))) OR (((i_category#31314 = Women) AND (((((i_color#31319 = dim) OR (i_color#31319 = chiffon)) AND ((i_units#31320 = Box) OR (i_units#31320 = N/A))) AND ((i_size#31317 = large) OR (i_size#31317 = extra large))) OR ((((i_color#31319 = lemon) OR (i_color#31319 = rosy)) AND ((i_units#31320 = Tsp) OR (i_units#31320 = Dram))) AND ((i_size#31317 = economy) OR (i_size#31317 = medium))))) OR ((i_category#31314 = Men) AND (((((i_color#31319 = deep) OR (i_color#31319 = smoke)) AND ((i_units#31320 = Gram) OR (i_units#31320 = Pound))) AND ((i_size#31317 = N/A) OR (i_size#31317 = small))) OR ((((i_color#31319 = metallic) OR (i_color#31319 = olive)) AND ((i_units#31320 = Lb) OR (i_units#31320 = Case))) AND ((i_size#31317 = large) OR (i_size#31317 = extra large))))))) AND isnotnull(i_manufact#31316))
                                          +- FileScan parquet spark_catalog.m.item[i_category#31314,i_manufact#31316,i_size#31317,i_color#31319,i_units#31320] Batched: true, DataFilters: [((((i_category#31314 = Women) AND (((((i_color#31319 = mint) OR (i_color#31319 = almond)) AND ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/item], PartitionFilters: [], PushedFilters: [Or(Or(And(EqualTo(i_category,Women),Or(And(And(Or(EqualTo(i_color,mint),EqualTo(i_color,almond))..., ReadSchema: struct<i_category:string,i_manufact:string,i_size:string,i_color:string,i_units:string>
