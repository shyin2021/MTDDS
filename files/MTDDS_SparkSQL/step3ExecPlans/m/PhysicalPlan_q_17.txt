AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[i_item_id#1272 ASC NULLS FIRST,i_item_desc#1275 ASC NULLS FIRST,s_state#76 ASC NULLS FIRST], output=[i_item_id#1272,i_item_desc#1275,s_state#76,store_sales_quantitycount#20370L,store_sales_quantityave#20371,store_sales_quantitystdev#20372,store_sales_quantitycov#20373,store_returns_quantitycount#20374L,store_returns_quantityave#20375,store_returns_quantitystdev#20376,store_returns_quantitycov#20377,catalog_sales_quantitycount#20378L,catalog_sales_quantityave#20379,catalog_sales_quantitystdev#20380,catalog_sales_quantitycov#20381])
   +- HashAggregate(keys=[i_item_id#1272, i_item_desc#1275, s_state#76], functions=[count(ss_quantity#1258), avg(ss_quantity#1258), stddev_samp(cast(ss_quantity#1258 as double)), count(sr_return_quantity#14), avg(sr_return_quantity#14), stddev_samp(cast(sr_return_quantity#14 as double)), count(cs_quantity#479), avg(cs_quantity#479), stddev_samp(cast(cs_quantity#479 as double))], output=[i_item_id#1272, i_item_desc#1275, s_state#76, store_sales_quantitycount#20370L, store_sales_quantityave#20371, store_sales_quantitystdev#20372, store_sales_quantitycov#20373, store_returns_quantitycount#20374L, store_returns_quantityave#20375, store_returns_quantitystdev#20376, store_returns_quantitycov#20377, catalog_sales_quantitycount#20378L, catalog_sales_quantityave#20379, catalog_sales_quantitystdev#20380, catalog_sales_quantitycov#20381])
      +- Exchange hashpartitioning(i_item_id#1272, i_item_desc#1275, s_state#76, 200), ENSURE_REQUIREMENTS, [plan_id=50992]
         +- HashAggregate(keys=[i_item_id#1272, i_item_desc#1275, s_state#76], functions=[partial_count(ss_quantity#1258), partial_avg(ss_quantity#1258), partial_stddev_samp(cast(ss_quantity#1258 as double)), partial_count(sr_return_quantity#14), partial_avg(sr_return_quantity#14), partial_stddev_samp(cast(sr_return_quantity#14 as double)), partial_count(cs_quantity#479), partial_avg(cs_quantity#479), partial_stddev_samp(cast(cs_quantity#479 as double))], output=[i_item_id#1272, i_item_desc#1275, s_state#76, count#20716L, sum#20717, count#20718L, n#20556, avg#20557, m2#20558, count#20719L, sum#20720, count#20721L, n#20572, avg#20573, m2#20574, count#20722L, sum#20723, count#20724L, n#20588, avg#20589, m2#20590])
            +- Project [ss_quantity#1258, sr_return_quantity#14, cs_quantity#479, s_state#76, i_item_id#1272, i_item_desc#1275]
               +- BroadcastHashJoin [ss_item_sk#1250], [i_item_sk#1271], Inner, BuildRight, false
                  :- Project [ss_item_sk#1250, ss_quantity#1258, sr_return_quantity#14, cs_quantity#479, s_state#76]
                  :  +- BroadcastHashJoin [ss_store_sk#1255], [s_store_sk#52], Inner, BuildRight, false
                  :     :- Project [ss_item_sk#1250, ss_store_sk#1255, ss_quantity#1258, sr_return_quantity#14, cs_quantity#479]
                  :     :  +- BroadcastHashJoin [cs_sold_date_sk#461], [d_date_sk#20410], Inner, BuildRight, false
                  :     :     :- Project [ss_item_sk#1250, ss_store_sk#1255, ss_quantity#1258, sr_return_quantity#14, cs_sold_date_sk#461, cs_quantity#479]
                  :     :     :  +- BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#20382], Inner, BuildRight, false
                  :     :     :     :- Project [ss_item_sk#1250, ss_store_sk#1255, ss_quantity#1258, sr_returned_date_sk#4, sr_return_quantity#14, cs_sold_date_sk#461, cs_quantity#479]
                  :     :     :     :  +- BroadcastHashJoin [ss_sold_date_sk#1248], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :     :     :- Project [ss_sold_date_sk#1248, ss_item_sk#1250, ss_store_sk#1255, ss_quantity#1258, sr_returned_date_sk#4, sr_return_quantity#14, cs_sold_date_sk#461, cs_quantity#479]
                  :     :     :     :     :  +- SortMergeJoin [sr_customer_sk#7, sr_item_sk#6], [cs_bill_customer_sk#464, cs_item_sk#476], Inner
                  :     :     :     :     :     :- Sort [sr_customer_sk#7 ASC NULLS FIRST, sr_item_sk#6 ASC NULLS FIRST], false, 0
                  :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#7, sr_item_sk#6, 200), ENSURE_REQUIREMENTS, [plan_id=50964]
                  :     :     :     :     :     :     +- Project [ss_sold_date_sk#1248, ss_item_sk#1250, ss_store_sk#1255, ss_quantity#1258, sr_returned_date_sk#4, sr_item_sk#6, sr_customer_sk#7, sr_return_quantity#14]
                  :     :     :     :     :     :        +- BroadcastHashJoin [ss_customer_sk#1251, ss_item_sk#1250, ss_ticket_number#1257], [sr_customer_sk#7, sr_item_sk#6, sr_ticket_number#13], Inner, BuildRight, false
                  :     :     :     :     :     :           :- Filter ((((isnotnull(ss_customer_sk#1251) AND isnotnull(ss_item_sk#1250)) AND isnotnull(ss_ticket_number#1257)) AND isnotnull(ss_sold_date_sk#1248)) AND isnotnull(ss_store_sk#1255))
                  :     :     :     :     :     :           :  +- FileScan parquet spark_catalog.m.store_sales[ss_sold_date_sk#1248,ss_item_sk#1250,ss_customer_sk#1251,ss_store_sk#1255,ss_ticket_number#1257,ss_quantity#1258] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1251), isnotnull(ss_item_sk#1250), isnotnull(ss_ticket_number#1257), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold..., ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int...
                  :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, int, false]),false), [plan_id=50959]
                  :     :     :     :     :     :              +- Filter (((isnotnull(sr_customer_sk#7) AND isnotnull(sr_item_sk#6)) AND isnotnull(sr_ticket_number#13)) AND isnotnull(sr_returned_date_sk#4))
                  :     :     :     :     :     :                 +- FileScan parquet spark_catalog.m.store_returns[sr_returned_date_sk#4,sr_item_sk#6,sr_customer_sk#7,sr_ticket_number#13,sr_return_quantity#14] Batched: true, DataFilters: [isnotnull(sr_customer_sk#7), isnotnull(sr_item_sk#6), isnotnull(sr_ticket_number#13), isnotnull(..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_retu..., ReadSchema: struct<sr_returned_date_sk:int,sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_return_q...
                  :     :     :     :     :     +- Sort [cs_bill_customer_sk#464 ASC NULLS FIRST, cs_item_sk#476 ASC NULLS FIRST], false, 0
                  :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#464, cs_item_sk#476, 200), ENSURE_REQUIREMENTS, [plan_id=50965]
                  :     :     :     :     :           +- Filter ((isnotnull(cs_bill_customer_sk#464) AND isnotnull(cs_item_sk#476)) AND isnotnull(cs_sold_date_sk#461))
                  :     :     :     :     :              +- FileScan parquet spark_catalog.m.catalog_sales[cs_sold_date_sk#461,cs_bill_customer_sk#464,cs_item_sk#476,cs_quantity#479] Batched: true, DataFilters: [isnotnull(cs_bill_customer_sk#464), isnotnull(cs_item_sk#476), isnotnull(cs_sold_date_sk#461)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>
                  :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=50971]
                  :     :     :     :        +- Project [d_date_sk#24]
                  :     :     :     :           +- Filter ((isnotnull(d_quarter_name#39) AND (d_quarter_name#39 = 2000Q1)) AND isnotnull(d_date_sk#24))
                  :     :     :     :              +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#24,d_quarter_name#39] Batched: true, DataFilters: [isnotnull(d_quarter_name#39), (d_quarter_name#39 = 2000Q1), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2000Q1), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>
                  :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=50975]
                  :     :     :        +- Project [d_date_sk#20382]
                  :     :     :           +- Filter (d_quarter_name#20397 IN (2000Q1,2000Q2,2000Q3) AND isnotnull(d_date_sk#20382))
                  :     :     :              +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#20382,d_quarter_name#20397] Batched: true, DataFilters: [d_quarter_name#20397 IN (2000Q1,2000Q2,2000Q3), isnotnull(d_date_sk#20382)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [2000Q1,2000Q2,2000Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>
                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=50979]
                  :     :        +- Project [d_date_sk#20410]
                  :     :           +- Filter (d_quarter_name#20425 IN (2000Q1,2000Q2,2000Q3) AND isnotnull(d_date_sk#20410))
                  :     :              +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#20410,d_quarter_name#20425] Batched: true, DataFilters: [d_quarter_name#20425 IN (2000Q1,2000Q2,2000Q3), isnotnull(d_date_sk#20410)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [In(d_quarter_name, [2000Q1,2000Q2,2000Q3]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_quarter_name:string>
                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=50983]
                  :        +- Filter isnotnull(s_store_sk#52)
                  :           +- FileScan parquet spark_catalog.m.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=50987]
                     +- Filter isnotnull(i_item_sk#1271)
                        +- FileScan parquet spark_catalog.m.item[i_item_sk#1271,i_item_id#1272,i_item_desc#1275] Batched: true, DataFilters: [isnotnull(i_item_sk#1271)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>
