== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['c_customer_id ASC NULLS FIRST], true
      +- 'Project ['c_customer_id AS customer_id#47622, concat(concat('coalesce('c_last_name, ), , ), 'coalesce('c_first_name, )) AS customername#47623]
         +- 'Filter (((('ca_city = Belmont) AND ('c_current_addr_sk = 'ca_address_sk)) AND (('ib_lower_bound >= 15969) AND ('ib_upper_bound <= (15969 + 50000)))) AND ((('ib_income_band_sk = 'hd_income_band_sk) AND ('cd_demo_sk = 'c_current_cdemo_sk)) AND (('hd_demo_sk = 'c_current_hdemo_sk) AND ('sr_cdemo_sk = 'cd_demo_sk))))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'Join Inner
               :  :  :  :- 'Join Inner
               :  :  :  :  :- 'UnresolvedRelation [customer], [], false
               :  :  :  :  +- 'UnresolvedRelation [customer_address], [], false
               :  :  :  +- 'UnresolvedRelation [customer_demographics], [], false
               :  :  +- 'UnresolvedRelation [household_demographics], [], false
               :  +- 'UnresolvedRelation [income_band], [], false
               +- 'UnresolvedRelation [store_returns], [], false

== Analyzed Logical Plan ==
customer_id: string, customername: string
GlobalLimit 100
+- LocalLimit 100
   +- Project [customer_id#47622, customername#47623]
      +- Sort [c_customer_id#82 ASC NULLS FIRST], true
         +- Project [c_customer_id#82 AS customer_id#47622, concat(concat(coalesce(c_last_name#90, ), , ), coalesce(c_first_name#89, )) AS customername#47623, c_customer_id#82]
            +- Filter ((((ca_city#8177 = Belmont) AND (c_current_addr_sk#85 = ca_address_sk#8171)) AND ((ib_lower_bound#37254 >= 15969) AND (ib_upper_bound#37255 <= (15969 + 50000)))) AND (((ib_income_band_sk#37253 = hd_income_band_sk#12111) AND (cd_demo_sk#8266 = c_current_cdemo_sk#83)) AND ((hd_demo_sk#12110 = c_current_hdemo_sk#84) AND (sr_cdemo_sk#8 = cd_demo_sk#8266))))
               +- Join Inner
                  :- Join Inner
                  :  :- Join Inner
                  :  :  :- Join Inner
                  :  :  :  :- Join Inner
                  :  :  :  :  :- SubqueryAlias spark_catalog.m.customer
                  :  :  :  :  :  +- Relation spark_catalog.m.customer[c_customer_sk#81,c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_shipto_date_sk#86,c_first_sales_date_sk#87,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] parquet
                  :  :  :  :  +- SubqueryAlias spark_catalog.m.customer_address
                  :  :  :  :     +- Relation spark_catalog.m.customer_address[ca_address_sk#8171,ca_address_id#8172,ca_street_number#8173,ca_street_name#8174,ca_street_type#8175,ca_suite_number#8176,ca_city#8177,ca_county#8178,ca_state#8179,ca_zip#8180,ca_country#8181,ca_gmt_offset#8182,ca_location_type#8183] parquet
                  :  :  :  +- SubqueryAlias spark_catalog.m.customer_demographics
                  :  :  :     +- Relation spark_catalog.m.customer_demographics[cd_demo_sk#8266,cd_gender#8267,cd_marital_status#8268,cd_education_status#8269,cd_purchase_estimate#8270,cd_credit_rating#8271,cd_dep_count#8272,cd_dep_employed_count#8273,cd_dep_college_count#8274] parquet
                  :  :  +- SubqueryAlias spark_catalog.m.household_demographics
                  :  :     +- Relation spark_catalog.m.household_demographics[hd_demo_sk#12110,hd_income_band_sk#12111,hd_buy_potential#12112,hd_dep_count#12113,hd_vehicle_count#12114] parquet
                  :  +- SubqueryAlias spark_catalog.m.income_band
                  :     +- Relation spark_catalog.m.income_band[ib_income_band_sk#37253,ib_lower_bound#37254,ib_upper_bound#37255] parquet
                  +- SubqueryAlias spark_catalog.m.store_returns
                     +- Relation spark_catalog.m.store_returns[sr_returned_date_sk#4,sr_return_time_sk#5,sr_item_sk#6,sr_customer_sk#7,sr_cdemo_sk#8,sr_hdemo_sk#9,sr_addr_sk#10,sr_store_sk#11,sr_reason_sk#12,sr_ticket_number#13,sr_return_quantity#14,sr_return_amt#15,sr_return_tax#16,sr_return_amt_inc_tax#17,sr_fee#18,sr_return_ship_cost#19,sr_refunded_cash#20,sr_reversed_charge#21,sr_store_credit#22,sr_net_loss#23] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Project [customer_id#47622, customername#47623]
      +- Sort [c_customer_id#82 ASC NULLS FIRST], true
         +- Project [c_customer_id#82 AS customer_id#47622, concat(coalesce(c_last_name#90, ), , , coalesce(c_first_name#89, )) AS customername#47623, c_customer_id#82]
            +- Join Inner, (sr_cdemo_sk#8 = cd_demo_sk#8266)
               :- Project [c_customer_id#82, c_first_name#89, c_last_name#90, cd_demo_sk#8266]
               :  +- Join Inner, (ib_income_band_sk#37253 = hd_income_band_sk#12111)
               :     :- Project [c_customer_id#82, c_first_name#89, c_last_name#90, cd_demo_sk#8266, hd_income_band_sk#12111]
               :     :  +- Join Inner, (hd_demo_sk#12110 = c_current_hdemo_sk#84)
               :     :     :- Project [c_customer_id#82, c_current_hdemo_sk#84, c_first_name#89, c_last_name#90, cd_demo_sk#8266]
               :     :     :  +- Join Inner, (cd_demo_sk#8266 = c_current_cdemo_sk#83)
               :     :     :     :- Project [c_customer_id#82, c_current_cdemo_sk#83, c_current_hdemo_sk#84, c_first_name#89, c_last_name#90]
               :     :     :     :  +- Join Inner, (c_current_addr_sk#85 = ca_address_sk#8171)
               :     :     :     :     :- Project [c_customer_id#82, c_current_cdemo_sk#83, c_current_hdemo_sk#84, c_current_addr_sk#85, c_first_name#89, c_last_name#90]
               :     :     :     :     :  +- Filter (isnotnull(c_current_addr_sk#85) AND (isnotnull(c_current_cdemo_sk#83) AND isnotnull(c_current_hdemo_sk#84)))
               :     :     :     :     :     +- Relation spark_catalog.m.customer[c_customer_sk#81,c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_shipto_date_sk#86,c_first_sales_date_sk#87,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] parquet
               :     :     :     :     +- Project [ca_address_sk#8171]
               :     :     :     :        +- Filter ((isnotnull(ca_city#8177) AND (ca_city#8177 = Belmont)) AND isnotnull(ca_address_sk#8171))
               :     :     :     :           +- Relation spark_catalog.m.customer_address[ca_address_sk#8171,ca_address_id#8172,ca_street_number#8173,ca_street_name#8174,ca_street_type#8175,ca_suite_number#8176,ca_city#8177,ca_county#8178,ca_state#8179,ca_zip#8180,ca_country#8181,ca_gmt_offset#8182,ca_location_type#8183] parquet
               :     :     :     +- Project [cd_demo_sk#8266]
               :     :     :        +- Filter isnotnull(cd_demo_sk#8266)
               :     :     :           +- Relation spark_catalog.m.customer_demographics[cd_demo_sk#8266,cd_gender#8267,cd_marital_status#8268,cd_education_status#8269,cd_purchase_estimate#8270,cd_credit_rating#8271,cd_dep_count#8272,cd_dep_employed_count#8273,cd_dep_college_count#8274] parquet
               :     :     +- Project [hd_demo_sk#12110, hd_income_band_sk#12111]
               :     :        +- Filter (isnotnull(hd_demo_sk#12110) AND isnotnull(hd_income_band_sk#12111))
               :     :           +- Relation spark_catalog.m.household_demographics[hd_demo_sk#12110,hd_income_band_sk#12111,hd_buy_potential#12112,hd_dep_count#12113,hd_vehicle_count#12114] parquet
               :     +- Project [ib_income_band_sk#37253]
               :        +- Filter (((isnotnull(ib_lower_bound#37254) AND isnotnull(ib_upper_bound#37255)) AND ((ib_lower_bound#37254 >= 15969) AND (ib_upper_bound#37255 <= 65969))) AND isnotnull(ib_income_band_sk#37253))
               :           +- Relation spark_catalog.m.income_band[ib_income_band_sk#37253,ib_lower_bound#37254,ib_upper_bound#37255] parquet
               +- Project [sr_cdemo_sk#8]
                  +- Filter isnotnull(sr_cdemo_sk#8)
                     +- Relation spark_catalog.m.store_returns[sr_returned_date_sk#4,sr_return_time_sk#5,sr_item_sk#6,sr_customer_sk#7,sr_cdemo_sk#8,sr_hdemo_sk#9,sr_addr_sk#10,sr_store_sk#11,sr_reason_sk#12,sr_ticket_number#13,sr_return_quantity#14,sr_return_amt#15,sr_return_tax#16,sr_return_amt_inc_tax#17,sr_fee#18,sr_return_ship_cost#19,sr_refunded_cash#20,sr_reversed_charge#21,sr_store_credit#22,sr_net_loss#23] parquet

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#82 ASC NULLS FIRST], output=[customer_id#47622,customername#47623])
   +- Project [c_customer_id#82 AS customer_id#47622, concat(coalesce(c_last_name#90, ), , , coalesce(c_first_name#89, )) AS customername#47623, c_customer_id#82]
      +- BroadcastHashJoin [cd_demo_sk#8266], [sr_cdemo_sk#8], Inner, BuildRight, false
         :- Project [c_customer_id#82, c_first_name#89, c_last_name#90, cd_demo_sk#8266]
         :  +- BroadcastHashJoin [hd_income_band_sk#12111], [ib_income_band_sk#37253], Inner, BuildRight, false
         :     :- Project [c_customer_id#82, c_first_name#89, c_last_name#90, cd_demo_sk#8266, hd_income_band_sk#12111]
         :     :  +- BroadcastHashJoin [c_current_hdemo_sk#84], [hd_demo_sk#12110], Inner, BuildRight, false
         :     :     :- Project [c_customer_id#82, c_current_hdemo_sk#84, c_first_name#89, c_last_name#90, cd_demo_sk#8266]
         :     :     :  +- BroadcastHashJoin [c_current_cdemo_sk#83], [cd_demo_sk#8266], Inner, BuildRight, false
         :     :     :     :- Project [c_customer_id#82, c_current_cdemo_sk#83, c_current_hdemo_sk#84, c_first_name#89, c_last_name#90]
         :     :     :     :  +- BroadcastHashJoin [c_current_addr_sk#85], [ca_address_sk#8171], Inner, BuildRight, false
         :     :     :     :     :- Filter ((isnotnull(c_current_addr_sk#85) AND isnotnull(c_current_cdemo_sk#83)) AND isnotnull(c_current_hdemo_sk#84))
         :     :     :     :     :  +- FileScan parquet spark_catalog.m.customer[c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#85), isnotnull(c_current_cdemo_sk#83), isnotnull(c_current_hdemo_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)], ReadSchema: struct<c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c...
         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=162781]
         :     :     :     :        +- Project [ca_address_sk#8171]
         :     :     :     :           +- Filter ((isnotnull(ca_city#8177) AND (ca_city#8177 = Belmont)) AND isnotnull(ca_address_sk#8171))
         :     :     :     :              +- FileScan parquet spark_catalog.m.customer_address[ca_address_sk#8171,ca_city#8177] Batched: true, DataFilters: [isnotnull(ca_city#8177), (ca_city#8177 = Belmont), isnotnull(ca_address_sk#8171)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_city), EqualTo(ca_city,Belmont), IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_city:string>
         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=162785]
         :     :     :        +- Filter isnotnull(cd_demo_sk#8266)
         :     :     :           +- FileScan parquet spark_catalog.m.customer_demographics[cd_demo_sk#8266] Batched: true, DataFilters: [isnotnull(cd_demo_sk#8266)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_demograph..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int>
         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=162789]
         :     :        +- Filter (isnotnull(hd_demo_sk#12110) AND isnotnull(hd_income_band_sk#12111))
         :     :           +- FileScan parquet spark_catalog.m.household_demographics[hd_demo_sk#12110,hd_income_band_sk#12111] Batched: true, DataFilters: [isnotnull(hd_demo_sk#12110), isnotnull(hd_income_band_sk#12111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/household_demograp..., PartitionFilters: [], PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)], ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>
         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=162793]
         :        +- Project [ib_income_band_sk#37253]
         :           +- Filter ((((isnotnull(ib_lower_bound#37254) AND isnotnull(ib_upper_bound#37255)) AND (ib_lower_bound#37254 >= 15969)) AND (ib_upper_bound#37255 <= 65969)) AND isnotnull(ib_income_band_sk#37253))
         :              +- FileScan parquet spark_catalog.m.income_band[ib_income_band_sk#37253,ib_lower_bound#37254,ib_upper_bound#37255] Batched: true, DataFilters: [isnotnull(ib_lower_bound#37254), isnotnull(ib_upper_bound#37255), (ib_lower_bound#37254 >= 15969..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/income_band], PartitionFilters: [], PushedFilters: [IsNotNull(ib_lower_bound), IsNotNull(ib_upper_bound), GreaterThanOrEqual(ib_lower_bound,15969), ..., ReadSchema: struct<ib_income_band_sk:int,ib_lower_bound:int,ib_upper_bound:int>
         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=162797]
            +- Filter isnotnull(sr_cdemo_sk#8)
               +- FileScan parquet spark_catalog.m.store_returns[sr_cdemo_sk#8] Batched: true, DataFilters: [isnotnull(sr_cdemo_sk#8)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_cdemo_sk)], ReadSchema: struct<sr_cdemo_sk:int>
