AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[w_state#21230 ASC NULLS FIRST,i_item_id#1272 ASC NULLS FIRST], output=[w_state#21230,i_item_id#1272,sales_before#31260,sales_after#31261])
   +- HashAggregate(keys=[w_state#21230, i_item_id#1272], functions=[sum(CASE WHEN (cast(d_date#26 as date) < 1999-04-25) THEN (cs_sales_price#482 - coalesce(cr_refunded_cash#7834, 0.0)) ELSE 0.0 END), sum(CASE WHEN (cast(d_date#26 as date) >= 1999-04-25) THEN (cs_sales_price#482 - coalesce(cr_refunded_cash#7834, 0.0)) ELSE 0.0 END)], output=[w_state#21230, i_item_id#1272, sales_before#31260, sales_after#31261])
      +- Exchange hashpartitioning(w_state#21230, i_item_id#1272, 200), ENSURE_REQUIREMENTS, [plan_id=91519]
         +- HashAggregate(keys=[w_state#21230, i_item_id#1272], functions=[partial_sum(CASE WHEN (cast(d_date#26 as date) < 1999-04-25) THEN (cs_sales_price#482 - coalesce(cr_refunded_cash#7834, 0.0)) ELSE 0.0 END), partial_sum(CASE WHEN (cast(d_date#26 as date) >= 1999-04-25) THEN (cs_sales_price#482 - coalesce(cr_refunded_cash#7834, 0.0)) ELSE 0.0 END)], output=[w_state#21230, i_item_id#1272, sum#31297, sum#31298])
            +- Project [cs_sales_price#482, cr_refunded_cash#7834, w_state#21230, i_item_id#1272, d_date#26]
               +- BroadcastHashJoin [cs_sold_date_sk#461], [d_date_sk#24], Inner, BuildRight, false
                  :- Project [cs_sold_date_sk#461, cs_sales_price#482, cr_refunded_cash#7834, w_state#21230, i_item_id#1272]
                  :  +- BroadcastHashJoin [cs_item_sk#476], [i_item_sk#1271], Inner, BuildRight, false
                  :     :- Project [cs_sold_date_sk#461, cs_item_sk#476, cs_sales_price#482, cr_refunded_cash#7834, w_state#21230]
                  :     :  +- BroadcastHashJoin [cs_warehouse_sk#475], [w_warehouse_sk#21220], Inner, BuildRight, false
                  :     :     :- Project [cs_sold_date_sk#461, cs_warehouse_sk#475, cs_item_sk#476, cs_sales_price#482, cr_refunded_cash#7834]
                  :     :     :  +- BroadcastHashJoin [cs_order_number#478, cs_item_sk#476], [cr_order_number#7827, cr_item_sk#7813], LeftOuter, BuildRight, false
                  :     :     :     :- Filter ((isnotnull(cs_warehouse_sk#475) AND isnotnull(cs_item_sk#476)) AND isnotnull(cs_sold_date_sk#461))
                  :     :     :     :  +- FileScan parquet spark_catalog.m.catalog_sales[cs_sold_date_sk#461,cs_warehouse_sk#475,cs_item_sk#476,cs_order_number#478,cs_sales_price#482] Batched: true, DataFilters: [isnotnull(cs_warehouse_sk#475), isnotnull(cs_item_sk#476), isnotnull(cs_sold_date_sk#461)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:int,cs_sales_price:...
                  :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=91502]
                  :     :     :        +- Filter (isnotnull(cr_order_number#7827) AND isnotnull(cr_item_sk#7813))
                  :     :     :           +- FileScan parquet spark_catalog.m.catalog_returns[cr_item_sk#7813,cr_order_number#7827,cr_refunded_cash#7834] Batched: true, DataFilters: [isnotnull(cr_order_number#7827), isnotnull(cr_item_sk#7813)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:double>
                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=91506]
                  :     :        +- Filter isnotnull(w_warehouse_sk#21220)
                  :     :           +- FileScan parquet spark_catalog.m.warehouse[w_warehouse_sk#21220,w_state#21230] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#21220)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_state:string>
                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=91510]
                  :        +- Project [i_item_sk#1271, i_item_id#1272]
                  :           +- Filter (((isnotnull(i_current_price#1276) AND (i_current_price#1276 >= 0.99)) AND (i_current_price#1276 <= 1.49)) AND isnotnull(i_item_sk#1271))
                  :              +- FileScan parquet spark_catalog.m.item[i_item_sk#1271,i_item_id#1272,i_current_price#1276] Batched: true, DataFilters: [isnotnull(i_current_price#1276), (i_current_price#1276 >= 0.99), (i_current_price#1276 <= 1.49),..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:double>
                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=91514]
                     +- Filter (((isnotnull(d_date#26) AND (cast(d_date#26 as date) >= 1999-03-26)) AND (cast(d_date#26 as date) <= 1999-05-25)) AND isnotnull(d_date_sk#24))
                        +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#24,d_date#26] Batched: true, DataFilters: [isnotnull(d_date#26), (cast(d_date#26 as date) >= 1999-03-26), (cast(d_date#26 as date) <= 1999-..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:string>
