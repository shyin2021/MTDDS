AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[s_store_name#57 ASC NULLS FIRST], output=[s_store_name#57,sum(ss_net_profit)#8386])
   +- HashAggregate(keys=[s_store_name#57], functions=[sum(ss_net_profit#1270)], output=[s_store_name#57, sum(ss_net_profit)#8386])
      +- Exchange hashpartitioning(s_store_name#57, 200), ENSURE_REQUIREMENTS, [plan_id=11717]
         +- HashAggregate(keys=[s_store_name#57], functions=[partial_sum(ss_net_profit#1270)], output=[s_store_name#57, sum#8396])
            +- Project [ss_net_profit#1270, s_store_name#57]
               +- BroadcastHashJoin [substr(s_zip#77, 1, 2)], [substr(ca_zip#8366, 1, 2)], Inner, BuildRight, false
                  :- Project [ss_net_profit#1270, s_store_name#57, s_zip#77]
                  :  +- BroadcastHashJoin [ss_store_sk#1255], [s_store_sk#52], Inner, BuildRight, false
                  :     :- Project [ss_store_sk#1255, ss_net_profit#1270]
                  :     :  +- BroadcastHashJoin [ss_sold_date_sk#1248], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :- Filter (isnotnull(ss_sold_date_sk#1248) AND isnotnull(ss_store_sk#1255))
                  :     :     :  +- FileScan parquet spark_catalog.m.store_sales[ss_sold_date_sk#1248,ss_store_sk#1255,ss_net_profit#1270] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#1248), isnotnull(ss_store_sk#1255)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:double>
                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11684]
                  :     :        +- Project [d_date_sk#24]
                  :     :           +- Filter ((((isnotnull(d_qoy#34) AND isnotnull(d_year#30)) AND (d_qoy#34 = 2)) AND (d_year#30 = 1998)) AND isnotnull(d_date_sk#24))
                  :     :              +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#24,d_year#30,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_qoy#34), isnotnull(d_year#30), (d_qoy#34 = 2), (d_year#30 = 1998), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11688]
                  :        +- Filter (isnotnull(s_store_sk#52) AND isnotnull(s_zip#77))
                  :           +- FileScan parquet spark_catalog.m.store[s_store_sk#52,s_store_name#57,s_zip#77] Batched: true, DataFilters: [isnotnull(s_store_sk#52), isnotnull(s_zip#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>
                  +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [plan_id=11712]
                     +- HashAggregate(keys=[ca_zip#8366], functions=[], output=[ca_zip#8366])
                        +- Exchange hashpartitioning(ca_zip#8366, 200), ENSURE_REQUIREMENTS, [plan_id=11709]
                           +- HashAggregate(keys=[ca_zip#8366], functions=[], output=[ca_zip#8366])
                              +- SortMergeJoin [coalesce(ca_zip#8366, ), isnull(ca_zip#8366)], [coalesce(ca_zip#8367, ), isnull(ca_zip#8367)], LeftSemi
                                 :- Sort [coalesce(ca_zip#8366, ) ASC NULLS FIRST, isnull(ca_zip#8366) ASC NULLS FIRST], false, 0
                                 :  +- Exchange hashpartitioning(coalesce(ca_zip#8366, ), isnull(ca_zip#8366), 200), ENSURE_REQUIREMENTS, [plan_id=11702]
                                 :     +- Project [substr(ca_zip#8180, 1, 5) AS ca_zip#8366]
                                 :        +- Filter (substr(ca_zip#8180, 1, 5) INSET 10298, 10374, 10425, 11340, 11489, 11618, 11652, 11686, 11855, 11912, 12197, 12318, 12320, 12350, 13086, 13123, 13261, 13338, 13376, 13378, 13443, 13844, 13869, 13918, 14073, 14155, 14196, 14242, 14312, 14440, 14530, 14851, 15371, 15475, 15543, 15734, 15751, 15782, 15794, 16005, 16226, 16364, 16515, 16704, 16791, 16891, 17167, 17193, 17291, 17672, 17819, 17879, 17895, 18218, 18360, 18367, 18410, 18421, 18434, 18569, 18700, 18767, 18829, 18884, 19326, 19444, 19489, 19753, 19833, 19988, 20244, 20317, 20534, 20601, 20712, 21060, 21094, 21204, 21231, 21343, 21727, 21800, 21814, 22728, 22815, 22911, 23065, 23952, 24227, 24255, 24286, 24594, 24660, 24891, 24987, 25115, 25178, 25214, 25264, 25333, 25494, 25717, 25973, 26217, 26689, 27052, 27116, 27156, 27287, 27369, 27385, 27413, 27642, 27700, 28055, 28239, 28571, 28577, 28810, 29086, 29392, 29450, 29752, 29818, 30106, 30415, 30621, 31013, 31016, 31655, 31830, 32489, 32669, 32754, 32919, 32958, 32961, 33113, 33122, 33159, 33467, 33562, 33773, 33869, 34306, 34473, 34594, 34948, 34972, 35076, 35390, 35834, 35863, 35926, 36201, 36335, 36430, 36479, 37119, 37788, 37914, 38353, 38607, 38919, 39214, 39459, 39500, 39503, 40146, 40936, 40979, 41162, 41232, 41255, 41331, 41351, 41352, 41419, 41807, 41836, 41967, 42361, 43432, 43639, 43830, 43933, 44529, 45266, 45484, 45533, 45645, 45676, 45859, 46081, 46131, 46507, 47289, 47369, 47529, 47602, 47770, 48017, 48162, 48333, 48530, 48567, 49101, 49130, 49140, 49211, 49230, 49254, 49472, 50412, 50632, 50636, 50679, 50788, 51089, 51184, 51195, 51634, 51717, 51766, 51782, 51793, 51933, 52094, 52301, 52389, 52868, 53163, 53535, 53565, 54010, 54207, 54364, 54558, 54585, 55233, 55349, 56224, 56355, 56436, 56455, 56600, 56877, 57025, 57553, 57631, 57649, 57839, 58032, 58058, 58062, 58117, 58218, 58412, 58454, 58581, 59004, 59080, 59130, 59226, 59345, 59386, 59494, 59852, 60083, 60298, 60560, 60624, 60736, 61527, 61794, 61860, 61997, 62361, 62585, 62878, 63073, 63180, 63193, 63294, 63792, 63991, 64592, 65148, 65177, 65501, 66057, 66943, 67881, 67975, 67998, 68101, 68293, 68341, 68605, 68730, 68770, 68843, 68852, 68908, 69280, 69952, 69998, 70041, 70070, 70073, 70450, 71144, 71256, 71286, 71836, 71948, 71954, 71997, 72592, 72991, 73021, 73108, 73134, 73146, 73219, 73873, 74686, 75660, 75675, 75742, 75752, 77454, 77817, 78093, 78366, 79077, 79658, 80332, 80846, 81003, 81070, 81084, 81335, 81504, 81755, 81963, 82080, 82602, 82620, 83041, 83086, 83583, 83647, 83833, 83910, 83986, 84247, 84680, 84844, 84919, 85066, 85761, 86057, 86379, 86709, 88086, 88137, 88217, 89193, 89338, 90209, 90229, 90669, 91110, 91894, 92292, 92380, 92645, 92696, 93498, 94791, 94835, 94898, 95042, 95430, 95464, 95694, 96435, 96560, 97173, 97462, 98069, 98072, 98338, 98533, 98569, 98584, 98862, 99060, 99132 AND isnotnull(substr(ca_zip#8180, 1, 5)))
                                 :           +- FileScan parquet spark_catalog.m.customer_address[ca_zip#8180] Batched: true, DataFilters: [substr(ca_zip#8180, 1, 5) INSET 10298, 10374, 10425, 11340, 11489, 11618, 11652, 11686, 11855, 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_address], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>
                                 +- Sort [coalesce(ca_zip#8367, ) ASC NULLS FIRST, isnull(ca_zip#8367) ASC NULLS FIRST], false, 0
                                    +- Exchange hashpartitioning(coalesce(ca_zip#8367, ), isnull(ca_zip#8367), 200), ENSURE_REQUIREMENTS, [plan_id=11703]
                                       +- Project [ca_zip#8367]
                                          +- Filter (cnt#8368L > 10)
                                             +- HashAggregate(keys=[ca_zip#8380], functions=[count(1)], output=[ca_zip#8367, cnt#8368L])
                                                +- Exchange hashpartitioning(ca_zip#8380, 200), ENSURE_REQUIREMENTS, [plan_id=11696]
                                                   +- HashAggregate(keys=[ca_zip#8380], functions=[partial_count(1)], output=[ca_zip#8380, count#8398L])
                                                      +- Project [ca_zip#8380]
                                                         +- BroadcastHashJoin [ca_address_sk#8371], [c_current_addr_sk#85], Inner, BuildLeft, false
                                                            :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11691]
                                                            :  +- Filter isnotnull(ca_address_sk#8371)
                                                            :     +- FileScan parquet spark_catalog.m.customer_address[ca_address_sk#8371,ca_zip#8380] Batched: true, DataFilters: [isnotnull(ca_address_sk#8371)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>
                                                            +- Project [c_current_addr_sk#85]
                                                               +- Filter ((isnotnull(c_preferred_cust_flag#91) AND (c_preferred_cust_flag#91 = Y)) AND isnotnull(c_current_addr_sk#85))
                                                                  +- FileScan parquet spark_catalog.m.customer[c_current_addr_sk#85,c_preferred_cust_flag#91] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#91), (c_preferred_cust_flag#91 = Y), isnotnull(c_current_addr_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>
