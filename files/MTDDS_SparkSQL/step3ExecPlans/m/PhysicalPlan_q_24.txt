AdaptiveSparkPlan isFinalPlan=false
+- Sort [c_last_name#90 ASC NULLS FIRST, c_first_name#89 ASC NULLS FIRST, s_store_name#57 ASC NULLS FIRST], true, 0
   +- Exchange rangepartitioning(c_last_name#90 ASC NULLS FIRST, c_first_name#89 ASC NULLS FIRST, s_store_name#57 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=68374]
      +- Filter (isnotnull(paid#24439) AND (paid#24439 > Subquery subquery#24440, [id=#68325]))
         :  +- Subquery subquery#24440, [id=#68325]
         :     +- AdaptiveSparkPlan isFinalPlan=false
         :        +- HashAggregate(keys=[], functions=[avg(netpaid#24453)], output=[(0.05 * avg(netpaid))#24456])
         :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=68323]
         :              +- HashAggregate(keys=[], functions=[partial_avg(netpaid#24453)], output=[sum#24984, count#24985L])
         :                 +- HashAggregate(keys=[c_last_name#25128, c_first_name#25127, s_store_name#25073, ca_state#25145, s_state#25092, i_color#25114, i_current_price#25102, i_manager_id#25117, i_units#25115, i_size#25112], functions=[sum(ss_sales_price#25038)], output=[netpaid#24453])
         :                    +- Exchange hashpartitioning(c_last_name#25128, c_first_name#25127, s_store_name#25073, ca_state#25145, s_state#25092, i_color#25114, i_current_price#25102, i_manager_id#25117, i_units#25115, i_size#25112, 200), ENSURE_REQUIREMENTS, [plan_id=68319]
         :                       +- HashAggregate(keys=[c_last_name#25128, c_first_name#25127, s_store_name#25073, ca_state#25145, s_state#25092, i_color#25114, knownfloatingpointnormalized(normalizenanandzero(i_current_price#25102)) AS i_current_price#25102, i_manager_id#25117, i_units#25115, i_size#25112], functions=[partial_sum(ss_sales_price#25038)], output=[c_last_name#25128, c_first_name#25127, s_store_name#25073, ca_state#25145, s_state#25092, i_color#25114, i_current_price#25102, i_manager_id#25117, i_units#25115, i_size#25112, sum#25152])
         :                          +- Project [ss_sales_price#25038, s_store_name#25073, s_state#25092, i_current_price#25102, i_size#25112, i_color#25114, i_units#25115, i_manager_id#25117, c_first_name#25127, c_last_name#25128, ca_state#25145]
         :                             +- BroadcastHashJoin [c_current_addr_sk#25123, s_zip#25093], [ca_address_sk#25137, ca_zip#25146], Inner, BuildRight, NOT (c_birth_country#25133 = upper(ca_country#25147)), false
         :                                :- Project [ss_sales_price#25038, s_store_name#25073, s_state#25092, s_zip#25093, i_current_price#25102, i_size#25112, i_color#25114, i_units#25115, i_manager_id#25117, c_current_addr_sk#25123, c_first_name#25127, c_last_name#25128, c_birth_country#25133]
         :                                :  +- BroadcastHashJoin [ss_customer_sk#25028], [c_customer_sk#25119], Inner, BuildRight, false
         :                                :     :- Project [ss_customer_sk#25028, ss_sales_price#25038, s_store_name#25073, s_state#25092, s_zip#25093, i_current_price#25102, i_size#25112, i_color#25114, i_units#25115, i_manager_id#25117]
         :                                :     :  +- BroadcastHashJoin [ss_item_sk#25027], [i_item_sk#25097], Inner, BuildRight, false
         :                                :     :     :- Project [ss_item_sk#25027, ss_customer_sk#25028, ss_sales_price#25038, s_store_name#25073, s_state#25092, s_zip#25093]
         :                                :     :     :  +- BroadcastHashJoin [ss_store_sk#25032], [s_store_sk#25068], Inner, BuildRight, false
         :                                :     :     :     :- Project [ss_item_sk#25027, ss_customer_sk#25028, ss_store_sk#25032, ss_sales_price#25038]
         :                                :     :     :     :  +- BroadcastHashJoin [ss_ticket_number#25034, ss_item_sk#25027], [sr_ticket_number#25057, sr_item_sk#25050], Inner, BuildRight, false
         :                                :     :     :     :     :- Filter (((isnotnull(ss_ticket_number#25034) AND isnotnull(ss_item_sk#25027)) AND isnotnull(ss_store_sk#25032)) AND isnotnull(ss_customer_sk#25028))
         :                                :     :     :     :     :  +- FileScan parquet spark_catalog.m.store_sales[ss_item_sk#25027,ss_customer_sk#25028,ss_store_sk#25032,ss_ticket_number#25034,ss_sales_price#25038] Batched: true, DataFilters: [isnotnull(ss_ticket_number#25034), isnotnull(ss_item_sk#25027), isnotnull(ss_store_sk#25032), is..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_sales_price:double>
         :                                :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=68298]
         :                                :     :     :     :        +- Filter (isnotnull(sr_ticket_number#25057) AND isnotnull(sr_item_sk#25050))
         :                                :     :     :     :           +- FileScan parquet spark_catalog.m.store_returns[sr_item_sk#25050,sr_ticket_number#25057] Batched: true, DataFilters: [isnotnull(sr_ticket_number#25057), isnotnull(sr_item_sk#25050)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>
         :                                :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=68302]
         :                                :     :     :        +- Project [s_store_sk#25068, s_store_name#25073, s_state#25092, s_zip#25093]
         :                                :     :     :           +- Filter (((isnotnull(s_market_id#25078) AND (s_market_id#25078 = 9)) AND isnotnull(s_store_sk#25068)) AND isnotnull(s_zip#25093))
         :                                :     :     :              +- FileScan parquet spark_catalog.m.store[s_store_sk#25068,s_store_name#25073,s_market_id#25078,s_state#25092,s_zip#25093] Batched: true, DataFilters: [isnotnull(s_market_id#25078), (s_market_id#25078 = 9), isnotnull(s_store_sk#25068), isnotnull(s_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,9), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>
         :                                :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68306]
         :                                :     :        +- Filter isnotnull(i_item_sk#25097)
         :                                :     :           +- FileScan parquet spark_catalog.m.item[i_item_sk#25097,i_current_price#25102,i_size#25112,i_color#25114,i_units#25115,i_manager_id#25117] Batched: true, DataFilters: [isnotnull(i_item_sk#25097)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:double,i_size:string,i_color:string,i_units:string,i_manager...
         :                                :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68310]
         :                                :        +- Filter ((isnotnull(c_customer_sk#25119) AND isnotnull(c_current_addr_sk#25123)) AND isnotnull(c_birth_country#25133))
         :                                :           +- FileScan parquet spark_catalog.m.customer[c_customer_sk#25119,c_current_addr_sk#25123,c_first_name#25127,c_last_name#25128,c_birth_country#25133] Batched: true, DataFilters: [isnotnull(c_customer_sk#25119), isnotnull(c_current_addr_sk#25123), isnotnull(c_birth_country#25..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_cou...
         :                                +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[2, string, false]),false), [plan_id=68314]
         :                                   +- Filter ((isnotnull(ca_address_sk#25137) AND isnotnull(ca_country#25147)) AND isnotnull(ca_zip#25146))
         :                                      +- FileScan parquet spark_catalog.m.customer_address[ca_address_sk#25137,ca_state#25145,ca_zip#25146,ca_country#25147] Batched: true, DataFilters: [isnotnull(ca_address_sk#25137), isnotnull(ca_country#25147), isnotnull(ca_zip#25146)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>
         +- HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57], functions=[sum(netpaid#24441)], output=[c_last_name#90, c_first_name#89, s_store_name#57, paid#24439])
            +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, s_store_name#57, 200), ENSURE_REQUIREMENTS, [plan_id=68370]
               +- HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57], functions=[partial_sum(netpaid#24441)], output=[c_last_name#90, c_first_name#89, s_store_name#57, sum#24979])
                  +- HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#8179, s_state#76, i_color#1288, i_current_price#1276, i_manager_id#1291, i_units#1289, i_size#1286], functions=[sum(ss_sales_price#1261)], output=[c_last_name#90, c_first_name#89, s_store_name#57, netpaid#24441])
                     +- Exchange hashpartitioning(c_last_name#90, c_first_name#89, s_store_name#57, ca_state#8179, s_state#76, i_color#1288, i_current_price#1276, i_manager_id#1291, i_units#1289, i_size#1286, 200), ENSURE_REQUIREMENTS, [plan_id=68366]
                        +- HashAggregate(keys=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#8179, s_state#76, i_color#1288, knownfloatingpointnormalized(normalizenanandzero(i_current_price#1276)) AS i_current_price#1276, i_manager_id#1291, i_units#1289, i_size#1286], functions=[partial_sum(ss_sales_price#1261)], output=[c_last_name#90, c_first_name#89, s_store_name#57, ca_state#8179, s_state#76, i_color#1288, i_current_price#1276, i_manager_id#1291, i_units#1289, i_size#1286, sum#24981])
                           +- Project [ss_sales_price#1261, s_store_name#57, s_state#76, i_current_price#1276, i_size#1286, i_color#1288, i_units#1289, i_manager_id#1291, c_first_name#89, c_last_name#90, ca_state#8179]
                              +- BroadcastHashJoin [c_current_addr_sk#85, s_zip#77], [ca_address_sk#8171, ca_zip#8180], Inner, BuildRight, NOT (c_birth_country#95 = upper(ca_country#8181)), false
                                 :- Project [ss_sales_price#1261, s_store_name#57, s_state#76, s_zip#77, i_current_price#1276, i_size#1286, i_color#1288, i_units#1289, i_manager_id#1291, c_current_addr_sk#85, c_first_name#89, c_last_name#90, c_birth_country#95]
                                 :  +- BroadcastHashJoin [ss_customer_sk#1251], [c_customer_sk#81], Inner, BuildRight, false
                                 :     :- Project [ss_customer_sk#1251, ss_sales_price#1261, s_store_name#57, s_state#76, s_zip#77, i_current_price#1276, i_size#1286, i_color#1288, i_units#1289, i_manager_id#1291]
                                 :     :  +- BroadcastHashJoin [ss_item_sk#1250], [i_item_sk#1271], Inner, BuildRight, false
                                 :     :     :- Project [ss_item_sk#1250, ss_customer_sk#1251, ss_sales_price#1261, s_store_name#57, s_state#76, s_zip#77]
                                 :     :     :  +- BroadcastHashJoin [ss_store_sk#1255], [s_store_sk#52], Inner, BuildRight, false
                                 :     :     :     :- Project [ss_item_sk#1250, ss_customer_sk#1251, ss_store_sk#1255, ss_sales_price#1261]
                                 :     :     :     :  +- BroadcastHashJoin [ss_ticket_number#1257, ss_item_sk#1250], [sr_ticket_number#13, sr_item_sk#6], Inner, BuildRight, false
                                 :     :     :     :     :- Filter (((isnotnull(ss_ticket_number#1257) AND isnotnull(ss_item_sk#1250)) AND isnotnull(ss_store_sk#1255)) AND isnotnull(ss_customer_sk#1251))
                                 :     :     :     :     :  +- FileScan parquet spark_catalog.m.store_sales[ss_item_sk#1250,ss_customer_sk#1251,ss_store_sk#1255,ss_ticket_number#1257,ss_sales_price#1261] Batched: true, DataFilters: [isnotnull(ss_ticket_number#1257), isnotnull(ss_item_sk#1250), isnotnull(ss_store_sk#1255), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_sales_price:double>
                                 :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=68345]
                                 :     :     :     :        +- Filter (isnotnull(sr_ticket_number#13) AND isnotnull(sr_item_sk#6))
                                 :     :     :     :           +- FileScan parquet spark_catalog.m.store_returns[sr_item_sk#6,sr_ticket_number#13] Batched: true, DataFilters: [isnotnull(sr_ticket_number#13), isnotnull(sr_item_sk#6)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>
                                 :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=68349]
                                 :     :     :        +- Project [s_store_sk#52, s_store_name#57, s_state#76, s_zip#77]
                                 :     :     :           +- Filter (((isnotnull(s_market_id#62) AND (s_market_id#62 = 9)) AND isnotnull(s_store_sk#52)) AND isnotnull(s_zip#77))
                                 :     :     :              +- FileScan parquet spark_catalog.m.store[s_store_sk#52,s_store_name#57,s_market_id#62,s_state#76,s_zip#77] Batched: true, DataFilters: [isnotnull(s_market_id#62), (s_market_id#62 = 9), isnotnull(s_store_sk#52), isnotnull(s_zip#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,9), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>
                                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68353]
                                 :     :        +- Filter ((isnotnull(i_color#1288) AND (i_color#1288 = lawn)) AND isnotnull(i_item_sk#1271))
                                 :     :           +- FileScan parquet spark_catalog.m.item[i_item_sk#1271,i_current_price#1276,i_size#1286,i_color#1288,i_units#1289,i_manager_id#1291] Batched: true, DataFilters: [isnotnull(i_color#1288), (i_color#1288 = lawn), isnotnull(i_item_sk#1271)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,lawn), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:double,i_size:string,i_color:string,i_units:string,i_manager...
                                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=68357]
                                 :        +- Filter ((isnotnull(c_customer_sk#81) AND isnotnull(c_current_addr_sk#85)) AND isnotnull(c_birth_country#95))
                                 :           +- FileScan parquet spark_catalog.m.customer[c_customer_sk#81,c_current_addr_sk#85,c_first_name#89,c_last_name#90,c_birth_country#95] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_current_addr_sk#85), isnotnull(c_birth_country#95)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_cou...
                                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[2, string, false]),false), [plan_id=68361]
                                    +- Filter ((isnotnull(ca_address_sk#8171) AND isnotnull(ca_country#8181)) AND isnotnull(ca_zip#8180))
                                       +- FileScan parquet spark_catalog.m.customer_address[ca_address_sk#8171,ca_state#8179,ca_zip#8180,ca_country#8181] Batched: true, DataFilters: [isnotnull(ca_address_sk#8171), isnotnull(ca_country#8181), isnotnull(ca_zip#8180)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>
