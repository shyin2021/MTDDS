== Parsed Logical Plan ==
'GlobalLimit 100
+- 'LocalLimit 100
   +- 'Sort ['s_store_name ASC NULLS FIRST], true
      +- 'Aggregate ['s_store_name], ['s_store_name, unresolvedalias('sum('ss_net_profit), None)]
         +- 'Filter (((('ss_store_sk = 's_store_sk) AND ('ss_sold_date_sk = 'd_date_sk)) AND ('d_qoy = 2)) AND (('d_year = 1998) AND ('substr('s_zip, 1, 2) = 'substr('V1.ca_zip, 1, 2))))
            +- 'Join Inner
               :- 'Join Inner
               :  :- 'Join Inner
               :  :  :- 'UnresolvedRelation [store_sales], [], false
               :  :  +- 'UnresolvedRelation [date_dim], [], false
               :  +- 'UnresolvedRelation [store], [], false
               +- 'SubqueryAlias V1
                  +- 'Project ['ca_zip]
                     +- 'SubqueryAlias A2
                        +- 'Intersect false
                           :- 'Project ['substr('ca_zip, 1, 5) AS ca_zip#8366]
                           :  +- 'Filter 'substr('ca_zip, 1, 5) IN (47602,16704,35863,28577,83910,36201,58412,48162,28055,41419,80332,38607,77817,24891,16226,18410,21231,59345,13918,51089,20317,17167,54585,67881,78366,47770,18360,51717,73108,14440,21800,89338,45859,65501,34948,25973,73219,25333,17291,10374,18829,60736,82620,41351,52094,19326,25214,54207,40936,21814,79077,25178,75742,77454,30621,89193,27369,41232,48567,83041,71948,37119,68341,14073,16891,62878,49130,19833,24286,27700,40979,50412,81504,94835,84844,71954,39503,57649,18434,24987,12350,86379,27413,44529,98569,16515,27287,24255,21094,16005,56436,91110,68293,56455,54558,10298,83647,32754,27052,51766,19444,13869,45645,94791,57631,20712,37788,41807,46507,21727,71836,81070,50632,88086,63991,20244,31655,51782,29818,63792,68605,94898,36430,57025,20601,82080,33869,22728,35834,29086,92645,98584,98072,11652,78093,57553,43830,71144,53565,18700,90209,71256,38353,54364,28571,96560,57839,56355,50679,45266,84680,34306,34972,48530,30106,15371,92380,84247,92292,68852,13338,34594,82602,70073,98069,85066,47289,11686,98862,26217,47529,63294,51793,35926,24227,14196,24594,32489,99060,49472,43432,49211,14312,88137,47369,56877,20534,81755,15794,12318,21060,73134,41255,63073,81003,73873,66057,51184,51195,45676,92696,70450,90669,98338,25264,38919,59226,58581,60298,17895,19489,52301,80846,95464,68770,51634,19988,18367,18421,11618,67975,25494,41352,95430,15734,62585,97173,33773,10425,75675,53535,17879,41967,12197,67998,79658,59130,72592,14851,43933,68101,50636,25717,71286,24660,58058,72991,95042,15543,33122,69280,11912,59386,27642,65177,17672,33467,64592,36335,54010,18767,63193,42361,49254,33113,33159,36479,59080,11855,81963,31016,49140,29392,41836,32958,53163,13844,73146,23952,65148,93498,14530,46131,58454,13376,13378,83986,12320,17193,59852,46081,98533,52389,13086,68843,31013,13261,60560,13443,45533,83583,11489,58218,19753,22911,25115,86709,27156,32669,13123,51933,39214,41331,66943,14155,69998,49101,70070,35076,14242,73021,59494,15782,29752,37914,74686,83086,34473,15751,81084,49230,91894,60624,17819,28810,63180,56224,39459,55233,75752,43639,55349,86057,62361,50788,31830,58062,18218,85761,60083,45484,21204,90229,70041,41162,35390,16364,39500,68908,26689,52868,81335,40146,11340,61527,61794,71997,30415,59004,29450,58117,69952,33562,83833,27385,61860,96435,48333,23065,32961,84919,61997,99132,22815,56600,68730,48017,95694,32919,88217,27116,28239,58032,18884,16791,21343,97462,18569,75660,15475)
                           :     +- 'UnresolvedRelation [customer_address], [], false
                           +- 'Project ['ca_zip]
                              +- 'SubqueryAlias A1
                                 +- 'UnresolvedHaving ('count(1) > 10)
                                    +- 'Aggregate ['ca_zip], ['substr('ca_zip, 1, 5) AS ca_zip#8367, 'count(1) AS cnt#8368]
                                       +- 'Filter (('ca_address_sk = 'c_current_addr_sk) AND ('c_preferred_cust_flag = Y))
                                          +- 'Join Inner
                                             :- 'UnresolvedRelation [customer_address], [], false
                                             +- 'UnresolvedRelation [customer], [], false

== Analyzed Logical Plan ==
s_store_name: string, sum(ss_net_profit): double
GlobalLimit 100
+- LocalLimit 100
   +- Sort [s_store_name#57 ASC NULLS FIRST], true
      +- Aggregate [s_store_name#57], [s_store_name#57, sum(ss_net_profit#1270) AS sum(ss_net_profit)#8386]
         +- Filter ((((ss_store_sk#1255 = s_store_sk#52) AND (ss_sold_date_sk#1248 = d_date_sk#24)) AND (d_qoy#34 = 2)) AND ((d_year#30 = 1998) AND (substr(s_zip#77, 1, 2) = substr(ca_zip#8366, 1, 2))))
            +- Join Inner
               :- Join Inner
               :  :- Join Inner
               :  :  :- SubqueryAlias spark_catalog.m.store_sales
               :  :  :  +- Relation spark_catalog.m.store_sales[ss_sold_date_sk#1248,ss_sold_time_sk#1249,ss_item_sk#1250,ss_customer_sk#1251,ss_cdemo_sk#1252,ss_hdemo_sk#1253,ss_addr_sk#1254,ss_store_sk#1255,ss_promo_sk#1256,ss_ticket_number#1257,ss_quantity#1258,ss_wholesale_cost#1259,ss_list_price#1260,ss_sales_price#1261,ss_ext_discount_amt#1262,ss_ext_sales_price#1263,ss_ext_wholesale_cost#1264,ss_ext_list_price#1265,ss_ext_tax#1266,ss_coupon_amt#1267,ss_net_paid#1268,ss_net_paid_inc_tax#1269,ss_net_profit#1270] parquet
               :  :  +- SubqueryAlias spark_catalog.m.date_dim
               :  :     +- Relation spark_catalog.m.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet
               :  +- SubqueryAlias spark_catalog.m.store
               :     +- Relation spark_catalog.m.store[s_store_sk#52,s_store_id#53,s_rec_start_date#54,s_rec_end_date#55,s_closed_date_sk#56,s_store_name#57,s_number_employees#58,s_floor_space#59,s_hours#60,s_manager#61,s_market_id#62,s_geography_class#63,s_market_desc#64,s_market_manager#65,s_division_id#66,s_division_name#67,s_company_id#68,s_company_name#69,s_street_number#70,s_street_name#71,s_street_type#72,s_suite_number#73,s_city#74,s_county#75,... 5 more fields] parquet
               +- SubqueryAlias V1
                  +- Project [ca_zip#8366]
                     +- SubqueryAlias A2
                        +- Intersect false
                           :- Project [substr(ca_zip#8180, 1, 5) AS ca_zip#8366]
                           :  +- Filter substr(ca_zip#8180, 1, 5) IN (47602,16704,35863,28577,83910,36201,58412,48162,28055,41419,80332,38607,77817,24891,16226,18410,21231,59345,13918,51089,20317,17167,54585,67881,78366,47770,18360,51717,73108,14440,21800,89338,45859,65501,34948,25973,73219,25333,17291,10374,18829,60736,82620,41351,52094,19326,25214,54207,40936,21814,79077,25178,75742,77454,30621,89193,27369,41232,48567,83041,71948,37119,68341,14073,16891,62878,49130,19833,24286,27700,40979,50412,81504,94835,84844,71954,39503,57649,18434,24987,12350,86379,27413,44529,98569,16515,27287,24255,21094,16005,56436,91110,68293,56455,54558,10298,83647,32754,27052,51766,19444,13869,45645,94791,57631,20712,37788,41807,46507,21727,71836,81070,50632,88086,63991,20244,31655,51782,29818,63792,68605,94898,36430,57025,20601,82080,33869,22728,35834,29086,92645,98584,98072,11652,78093,57553,43830,71144,53565,18700,90209,71256,38353,54364,28571,96560,57839,56355,50679,45266,84680,34306,34972,48530,30106,15371,92380,84247,92292,68852,13338,34594,82602,70073,98069,85066,47289,11686,98862,26217,47529,63294,51793,35926,24227,14196,24594,32489,99060,49472,43432,49211,14312,88137,47369,56877,20534,81755,15794,12318,21060,73134,41255,63073,81003,73873,66057,51184,51195,45676,92696,70450,90669,98338,25264,38919,59226,58581,60298,17895,19489,52301,80846,95464,68770,51634,19988,18367,18421,11618,67975,25494,41352,95430,15734,62585,97173,33773,10425,75675,53535,17879,41967,12197,67998,79658,59130,72592,14851,43933,68101,50636,25717,71286,24660,58058,72991,95042,15543,33122,69280,11912,59386,27642,65177,17672,33467,64592,36335,54010,18767,63193,42361,49254,33113,33159,36479,59080,11855,81963,31016,49140,29392,41836,32958,53163,13844,73146,23952,65148,93498,14530,46131,58454,13376,13378,83986,12320,17193,59852,46081,98533,52389,13086,68843,31013,13261,60560,13443,45533,83583,11489,58218,19753,22911,25115,86709,27156,32669,13123,51933,39214,41331,66943,14155,69998,49101,70070,35076,14242,73021,59494,15782,29752,37914,74686,83086,34473,15751,81084,49230,91894,60624,17819,28810,63180,56224,39459,55233,75752,43639,55349,86057,62361,50788,31830,58062,18218,85761,60083,45484,21204,90229,70041,41162,35390,16364,39500,68908,26689,52868,81335,40146,11340,61527,61794,71997,30415,59004,29450,58117,69952,33562,83833,27385,61860,96435,48333,23065,32961,84919,61997,99132,22815,56600,68730,48017,95694,32919,88217,27116,28239,58032,18884,16791,21343,97462,18569,75660,15475)
                           :     +- SubqueryAlias spark_catalog.m.customer_address
                           :        +- Relation spark_catalog.m.customer_address[ca_address_sk#8171,ca_address_id#8172,ca_street_number#8173,ca_street_name#8174,ca_street_type#8175,ca_suite_number#8176,ca_city#8177,ca_county#8178,ca_state#8179,ca_zip#8180,ca_country#8181,ca_gmt_offset#8182,ca_location_type#8183] parquet
                           +- Project [ca_zip#8367]
                              +- SubqueryAlias A1
                                 +- Filter (cnt#8368L > cast(10 as bigint))
                                    +- Aggregate [ca_zip#8380], [substr(ca_zip#8380, 1, 5) AS ca_zip#8367, count(1) AS cnt#8368L]
                                       +- Filter ((ca_address_sk#8371 = c_current_addr_sk#85) AND (c_preferred_cust_flag#91 = Y))
                                          +- Join Inner
                                             :- SubqueryAlias spark_catalog.m.customer_address
                                             :  +- Relation spark_catalog.m.customer_address[ca_address_sk#8371,ca_address_id#8372,ca_street_number#8373,ca_street_name#8374,ca_street_type#8375,ca_suite_number#8376,ca_city#8377,ca_county#8378,ca_state#8379,ca_zip#8380,ca_country#8381,ca_gmt_offset#8382,ca_location_type#8383] parquet
                                             +- SubqueryAlias spark_catalog.m.customer
                                                +- Relation spark_catalog.m.customer[c_customer_sk#81,c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_shipto_date_sk#86,c_first_sales_date_sk#87,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] parquet

== Optimized Logical Plan ==
GlobalLimit 100
+- LocalLimit 100
   +- Sort [s_store_name#57 ASC NULLS FIRST], true
      +- Aggregate [s_store_name#57], [s_store_name#57, sum(ss_net_profit#1270) AS sum(ss_net_profit)#8386]
         +- Project [ss_net_profit#1270, s_store_name#57]
            +- Join Inner, (substr(s_zip#77, 1, 2) = substr(ca_zip#8366, 1, 2))
               :- Project [ss_net_profit#1270, s_store_name#57, s_zip#77]
               :  +- Join Inner, (ss_store_sk#1255 = s_store_sk#52)
               :     :- Project [ss_store_sk#1255, ss_net_profit#1270]
               :     :  +- Join Inner, (ss_sold_date_sk#1248 = d_date_sk#24)
               :     :     :- Project [ss_sold_date_sk#1248, ss_store_sk#1255, ss_net_profit#1270]
               :     :     :  +- Filter (isnotnull(ss_sold_date_sk#1248) AND isnotnull(ss_store_sk#1255))
               :     :     :     +- Relation spark_catalog.m.store_sales[ss_sold_date_sk#1248,ss_sold_time_sk#1249,ss_item_sk#1250,ss_customer_sk#1251,ss_cdemo_sk#1252,ss_hdemo_sk#1253,ss_addr_sk#1254,ss_store_sk#1255,ss_promo_sk#1256,ss_ticket_number#1257,ss_quantity#1258,ss_wholesale_cost#1259,ss_list_price#1260,ss_sales_price#1261,ss_ext_discount_amt#1262,ss_ext_sales_price#1263,ss_ext_wholesale_cost#1264,ss_ext_list_price#1265,ss_ext_tax#1266,ss_coupon_amt#1267,ss_net_paid#1268,ss_net_paid_inc_tax#1269,ss_net_profit#1270] parquet
               :     :     +- Project [d_date_sk#24]
               :     :        +- Filter (((isnotnull(d_qoy#34) AND isnotnull(d_year#30)) AND ((d_qoy#34 = 2) AND (d_year#30 = 1998))) AND isnotnull(d_date_sk#24))
               :     :           +- Relation spark_catalog.m.date_dim[d_date_sk#24,d_date_id#25,d_date#26,d_month_seq#27,d_week_seq#28,d_quarter_seq#29,d_year#30,d_dow#31,d_moy#32,d_dom#33,d_qoy#34,d_fy_year#35,d_fy_quarter_seq#36,d_fy_week_seq#37,d_day_name#38,d_quarter_name#39,d_holiday#40,d_weekend#41,d_following_holiday#42,d_first_dom#43,d_last_dom#44,d_same_day_ly#45,d_same_day_lq#46,d_current_day#47,... 4 more fields] parquet
               :     +- Project [s_store_sk#52, s_store_name#57, s_zip#77]
               :        +- Filter (isnotnull(s_store_sk#52) AND isnotnull(s_zip#77))
               :           +- Relation spark_catalog.m.store[s_store_sk#52,s_store_id#53,s_rec_start_date#54,s_rec_end_date#55,s_closed_date_sk#56,s_store_name#57,s_number_employees#58,s_floor_space#59,s_hours#60,s_manager#61,s_market_id#62,s_geography_class#63,s_market_desc#64,s_market_manager#65,s_division_id#66,s_division_name#67,s_company_id#68,s_company_name#69,s_street_number#70,s_street_name#71,s_street_type#72,s_suite_number#73,s_city#74,s_county#75,... 5 more fields] parquet
               +- Aggregate [ca_zip#8366], [ca_zip#8366]
                  +- Join LeftSemi, (ca_zip#8366 <=> ca_zip#8367)
                     :- Project [substr(ca_zip#8180, 1, 5) AS ca_zip#8366]
                     :  +- Filter (substr(ca_zip#8180, 1, 5) INSET 10298, 10374, 10425, 11340, 11489, 11618, 11652, 11686, 11855, 11912, 12197, 12318, 12320, 12350, 13086, 13123, 13261, 13338, 13376, 13378, 13443, 13844, 13869, 13918, 14073, 14155, 14196, 14242, 14312, 14440, 14530, 14851, 15371, 15475, 15543, 15734, 15751, 15782, 15794, 16005, 16226, 16364, 16515, 16704, 16791, 16891, 17167, 17193, 17291, 17672, 17819, 17879, 17895, 18218, 18360, 18367, 18410, 18421, 18434, 18569, 18700, 18767, 18829, 18884, 19326, 19444, 19489, 19753, 19833, 19988, 20244, 20317, 20534, 20601, 20712, 21060, 21094, 21204, 21231, 21343, 21727, 21800, 21814, 22728, 22815, 22911, 23065, 23952, 24227, 24255, 24286, 24594, 24660, 24891, 24987, 25115, 25178, 25214, 25264, 25333, 25494, 25717, 25973, 26217, 26689, 27052, 27116, 27156, 27287, 27369, 27385, 27413, 27642, 27700, 28055, 28239, 28571, 28577, 28810, 29086, 29392, 29450, 29752, 29818, 30106, 30415, 30621, 31013, 31016, 31655, 31830, 32489, 32669, 32754, 32919, 32958, 32961, 33113, 33122, 33159, 33467, 33562, 33773, 33869, 34306, 34473, 34594, 34948, 34972, 35076, 35390, 35834, 35863, 35926, 36201, 36335, 36430, 36479, 37119, 37788, 37914, 38353, 38607, 38919, 39214, 39459, 39500, 39503, 40146, 40936, 40979, 41162, 41232, 41255, 41331, 41351, 41352, 41419, 41807, 41836, 41967, 42361, 43432, 43639, 43830, 43933, 44529, 45266, 45484, 45533, 45645, 45676, 45859, 46081, 46131, 46507, 47289, 47369, 47529, 47602, 47770, 48017, 48162, 48333, 48530, 48567, 49101, 49130, 49140, 49211, 49230, 49254, 49472, 50412, 50632, 50636, 50679, 50788, 51089, 51184, 51195, 51634, 51717, 51766, 51782, 51793, 51933, 52094, 52301, 52389, 52868, 53163, 53535, 53565, 54010, 54207, 54364, 54558, 54585, 55233, 55349, 56224, 56355, 56436, 56455, 56600, 56877, 57025, 57553, 57631, 57649, 57839, 58032, 58058, 58062, 58117, 58218, 58412, 58454, 58581, 59004, 59080, 59130, 59226, 59345, 59386, 59494, 59852, 60083, 60298, 60560, 60624, 60736, 61527, 61794, 61860, 61997, 62361, 62585, 62878, 63073, 63180, 63193, 63294, 63792, 63991, 64592, 65148, 65177, 65501, 66057, 66943, 67881, 67975, 67998, 68101, 68293, 68341, 68605, 68730, 68770, 68843, 68852, 68908, 69280, 69952, 69998, 70041, 70070, 70073, 70450, 71144, 71256, 71286, 71836, 71948, 71954, 71997, 72592, 72991, 73021, 73108, 73134, 73146, 73219, 73873, 74686, 75660, 75675, 75742, 75752, 77454, 77817, 78093, 78366, 79077, 79658, 80332, 80846, 81003, 81070, 81084, 81335, 81504, 81755, 81963, 82080, 82602, 82620, 83041, 83086, 83583, 83647, 83833, 83910, 83986, 84247, 84680, 84844, 84919, 85066, 85761, 86057, 86379, 86709, 88086, 88137, 88217, 89193, 89338, 90209, 90229, 90669, 91110, 91894, 92292, 92380, 92645, 92696, 93498, 94791, 94835, 94898, 95042, 95430, 95464, 95694, 96435, 96560, 97173, 97462, 98069, 98072, 98338, 98533, 98569, 98584, 98862, 99060, 99132 AND isnotnull(substr(ca_zip#8180, 1, 5)))
                     :     +- Relation spark_catalog.m.customer_address[ca_address_sk#8171,ca_address_id#8172,ca_street_number#8173,ca_street_name#8174,ca_street_type#8175,ca_suite_number#8176,ca_city#8177,ca_county#8178,ca_state#8179,ca_zip#8180,ca_country#8181,ca_gmt_offset#8182,ca_location_type#8183] parquet
                     +- Project [ca_zip#8367]
                        +- Filter (cnt#8368L > 10)
                           +- Aggregate [ca_zip#8380], [substr(ca_zip#8380, 1, 5) AS ca_zip#8367, count(1) AS cnt#8368L]
                              +- Project [ca_zip#8380]
                                 +- Join Inner, (ca_address_sk#8371 = c_current_addr_sk#85)
                                    :- Project [ca_address_sk#8371, ca_zip#8380]
                                    :  +- Filter isnotnull(ca_address_sk#8371)
                                    :     +- Relation spark_catalog.m.customer_address[ca_address_sk#8371,ca_address_id#8372,ca_street_number#8373,ca_street_name#8374,ca_street_type#8375,ca_suite_number#8376,ca_city#8377,ca_county#8378,ca_state#8379,ca_zip#8380,ca_country#8381,ca_gmt_offset#8382,ca_location_type#8383] parquet
                                    +- Project [c_current_addr_sk#85]
                                       +- Filter ((isnotnull(c_preferred_cust_flag#91) AND (c_preferred_cust_flag#91 = Y)) AND isnotnull(c_current_addr_sk#85))
                                          +- Relation spark_catalog.m.customer[c_customer_sk#81,c_customer_id#82,c_current_cdemo_sk#83,c_current_hdemo_sk#84,c_current_addr_sk#85,c_first_shipto_date_sk#86,c_first_sales_date_sk#87,c_salutation#88,c_first_name#89,c_last_name#90,c_preferred_cust_flag#91,c_birth_day#92,c_birth_month#93,c_birth_year#94,c_birth_country#95,c_login#96,c_email_address#97,c_last_review_date#98] parquet

== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[s_store_name#57 ASC NULLS FIRST], output=[s_store_name#57,sum(ss_net_profit)#8386])
   +- HashAggregate(keys=[s_store_name#57], functions=[sum(ss_net_profit#1270)], output=[s_store_name#57, sum(ss_net_profit)#8386])
      +- Exchange hashpartitioning(s_store_name#57, 200), ENSURE_REQUIREMENTS, [plan_id=11717]
         +- HashAggregate(keys=[s_store_name#57], functions=[partial_sum(ss_net_profit#1270)], output=[s_store_name#57, sum#8396])
            +- Project [ss_net_profit#1270, s_store_name#57]
               +- BroadcastHashJoin [substr(s_zip#77, 1, 2)], [substr(ca_zip#8366, 1, 2)], Inner, BuildRight, false
                  :- Project [ss_net_profit#1270, s_store_name#57, s_zip#77]
                  :  +- BroadcastHashJoin [ss_store_sk#1255], [s_store_sk#52], Inner, BuildRight, false
                  :     :- Project [ss_store_sk#1255, ss_net_profit#1270]
                  :     :  +- BroadcastHashJoin [ss_sold_date_sk#1248], [d_date_sk#24], Inner, BuildRight, false
                  :     :     :- Filter (isnotnull(ss_sold_date_sk#1248) AND isnotnull(ss_store_sk#1255))
                  :     :     :  +- FileScan parquet spark_catalog.m.store_sales[ss_sold_date_sk#1248,ss_store_sk#1255,ss_net_profit#1270] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#1248), isnotnull(ss_store_sk#1255)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:double>
                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11684]
                  :     :        +- Project [d_date_sk#24]
                  :     :           +- Filter ((((isnotnull(d_qoy#34) AND isnotnull(d_year#30)) AND (d_qoy#34 = 2)) AND (d_year#30 = 1998)) AND isnotnull(d_date_sk#24))
                  :     :              +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#24,d_year#30,d_qoy#34] Batched: true, DataFilters: [isnotnull(d_qoy#34), isnotnull(d_year#30), (d_qoy#34 = 2), (d_year#30 = 1998), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>
                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11688]
                  :        +- Filter (isnotnull(s_store_sk#52) AND isnotnull(s_zip#77))
                  :           +- FileScan parquet spark_catalog.m.store[s_store_sk#52,s_store_name#57,s_zip#77] Batched: true, DataFilters: [isnotnull(s_store_sk#52), isnotnull(s_zip#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>
                  +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [plan_id=11712]
                     +- HashAggregate(keys=[ca_zip#8366], functions=[], output=[ca_zip#8366])
                        +- Exchange hashpartitioning(ca_zip#8366, 200), ENSURE_REQUIREMENTS, [plan_id=11709]
                           +- HashAggregate(keys=[ca_zip#8366], functions=[], output=[ca_zip#8366])
                              +- SortMergeJoin [coalesce(ca_zip#8366, ), isnull(ca_zip#8366)], [coalesce(ca_zip#8367, ), isnull(ca_zip#8367)], LeftSemi
                                 :- Sort [coalesce(ca_zip#8366, ) ASC NULLS FIRST, isnull(ca_zip#8366) ASC NULLS FIRST], false, 0
                                 :  +- Exchange hashpartitioning(coalesce(ca_zip#8366, ), isnull(ca_zip#8366), 200), ENSURE_REQUIREMENTS, [plan_id=11702]
                                 :     +- Project [substr(ca_zip#8180, 1, 5) AS ca_zip#8366]
                                 :        +- Filter (substr(ca_zip#8180, 1, 5) INSET 10298, 10374, 10425, 11340, 11489, 11618, 11652, 11686, 11855, 11912, 12197, 12318, 12320, 12350, 13086, 13123, 13261, 13338, 13376, 13378, 13443, 13844, 13869, 13918, 14073, 14155, 14196, 14242, 14312, 14440, 14530, 14851, 15371, 15475, 15543, 15734, 15751, 15782, 15794, 16005, 16226, 16364, 16515, 16704, 16791, 16891, 17167, 17193, 17291, 17672, 17819, 17879, 17895, 18218, 18360, 18367, 18410, 18421, 18434, 18569, 18700, 18767, 18829, 18884, 19326, 19444, 19489, 19753, 19833, 19988, 20244, 20317, 20534, 20601, 20712, 21060, 21094, 21204, 21231, 21343, 21727, 21800, 21814, 22728, 22815, 22911, 23065, 23952, 24227, 24255, 24286, 24594, 24660, 24891, 24987, 25115, 25178, 25214, 25264, 25333, 25494, 25717, 25973, 26217, 26689, 27052, 27116, 27156, 27287, 27369, 27385, 27413, 27642, 27700, 28055, 28239, 28571, 28577, 28810, 29086, 29392, 29450, 29752, 29818, 30106, 30415, 30621, 31013, 31016, 31655, 31830, 32489, 32669, 32754, 32919, 32958, 32961, 33113, 33122, 33159, 33467, 33562, 33773, 33869, 34306, 34473, 34594, 34948, 34972, 35076, 35390, 35834, 35863, 35926, 36201, 36335, 36430, 36479, 37119, 37788, 37914, 38353, 38607, 38919, 39214, 39459, 39500, 39503, 40146, 40936, 40979, 41162, 41232, 41255, 41331, 41351, 41352, 41419, 41807, 41836, 41967, 42361, 43432, 43639, 43830, 43933, 44529, 45266, 45484, 45533, 45645, 45676, 45859, 46081, 46131, 46507, 47289, 47369, 47529, 47602, 47770, 48017, 48162, 48333, 48530, 48567, 49101, 49130, 49140, 49211, 49230, 49254, 49472, 50412, 50632, 50636, 50679, 50788, 51089, 51184, 51195, 51634, 51717, 51766, 51782, 51793, 51933, 52094, 52301, 52389, 52868, 53163, 53535, 53565, 54010, 54207, 54364, 54558, 54585, 55233, 55349, 56224, 56355, 56436, 56455, 56600, 56877, 57025, 57553, 57631, 57649, 57839, 58032, 58058, 58062, 58117, 58218, 58412, 58454, 58581, 59004, 59080, 59130, 59226, 59345, 59386, 59494, 59852, 60083, 60298, 60560, 60624, 60736, 61527, 61794, 61860, 61997, 62361, 62585, 62878, 63073, 63180, 63193, 63294, 63792, 63991, 64592, 65148, 65177, 65501, 66057, 66943, 67881, 67975, 67998, 68101, 68293, 68341, 68605, 68730, 68770, 68843, 68852, 68908, 69280, 69952, 69998, 70041, 70070, 70073, 70450, 71144, 71256, 71286, 71836, 71948, 71954, 71997, 72592, 72991, 73021, 73108, 73134, 73146, 73219, 73873, 74686, 75660, 75675, 75742, 75752, 77454, 77817, 78093, 78366, 79077, 79658, 80332, 80846, 81003, 81070, 81084, 81335, 81504, 81755, 81963, 82080, 82602, 82620, 83041, 83086, 83583, 83647, 83833, 83910, 83986, 84247, 84680, 84844, 84919, 85066, 85761, 86057, 86379, 86709, 88086, 88137, 88217, 89193, 89338, 90209, 90229, 90669, 91110, 91894, 92292, 92380, 92645, 92696, 93498, 94791, 94835, 94898, 95042, 95430, 95464, 95694, 96435, 96560, 97173, 97462, 98069, 98072, 98338, 98533, 98569, 98584, 98862, 99060, 99132 AND isnotnull(substr(ca_zip#8180, 1, 5)))
                                 :           +- FileScan parquet spark_catalog.m.customer_address[ca_zip#8180] Batched: true, DataFilters: [substr(ca_zip#8180, 1, 5) INSET 10298, 10374, 10425, 11340, 11489, 11618, 11652, 11686, 11855, 1..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_address], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<ca_zip:string>
                                 +- Sort [coalesce(ca_zip#8367, ) ASC NULLS FIRST, isnull(ca_zip#8367) ASC NULLS FIRST], false, 0
                                    +- Exchange hashpartitioning(coalesce(ca_zip#8367, ), isnull(ca_zip#8367), 200), ENSURE_REQUIREMENTS, [plan_id=11703]
                                       +- Project [ca_zip#8367]
                                          +- Filter (cnt#8368L > 10)
                                             +- HashAggregate(keys=[ca_zip#8380], functions=[count(1)], output=[ca_zip#8367, cnt#8368L])
                                                +- Exchange hashpartitioning(ca_zip#8380, 200), ENSURE_REQUIREMENTS, [plan_id=11696]
                                                   +- HashAggregate(keys=[ca_zip#8380], functions=[partial_count(1)], output=[ca_zip#8380, count#8398L])
                                                      +- Project [ca_zip#8380]
                                                         +- BroadcastHashJoin [ca_address_sk#8371], [c_current_addr_sk#85], Inner, BuildLeft, false
                                                            :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11691]
                                                            :  +- Filter isnotnull(ca_address_sk#8371)
                                                            :     +- FileScan parquet spark_catalog.m.customer_address[ca_address_sk#8371,ca_zip#8380] Batched: true, DataFilters: [isnotnull(ca_address_sk#8371)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer_address], PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>
                                                            +- Project [c_current_addr_sk#85]
                                                               +- Filter ((isnotnull(c_preferred_cust_flag#91) AND (c_preferred_cust_flag#91 = Y)) AND isnotnull(c_current_addr_sk#85))
                                                                  +- FileScan parquet spark_catalog.m.customer[c_current_addr_sk#85,c_preferred_cust_flag#91] Batched: true, DataFilters: [isnotnull(c_preferred_cust_flag#91), (c_preferred_cust_flag#91 = Y), isnotnull(c_current_addr_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_preferred_cust_flag), EqualTo(c_preferred_cust_flag,Y), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_current_addr_sk:int,c_preferred_cust_flag:string>
