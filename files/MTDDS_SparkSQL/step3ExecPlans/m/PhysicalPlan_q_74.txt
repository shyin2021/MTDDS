AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[customer_last_name#41454 ASC NULLS FIRST,customer_first_name#41453 ASC NULLS FIRST,customer_id#41452 ASC NULLS FIRST], output=[customer_id#41452,customer_first_name#41453,customer_last_name#41454])
   +- Project [customer_id#41452, customer_first_name#41453, customer_last_name#41454]
      +- SortMergeJoin [customer_id#41390], [customer_id#41464], Inner, (CASE WHEN (year_total#41400 > 0.0) THEN (year_total#41468 / year_total#41400) END > CASE WHEN (year_total#41394 > 0.0) THEN (year_total#41456 / year_total#41394) END)
         :- Project [customer_id#41390, year_total#41394, customer_id#41452, customer_first_name#41453, customer_last_name#41454, year_total#41456, year_total#41400]
         :  +- SortMergeJoin [customer_id#41390], [customer_id#41396], Inner
         :     :- SortMergeJoin [customer_id#41390], [customer_id#41452], Inner
         :     :  :- Sort [customer_id#41390 ASC NULLS FIRST], false, 0
         :     :  :  +- Exchange hashpartitioning(customer_id#41390, 200), ENSURE_REQUIREMENTS, [plan_id=143668]
         :     :  :     +- Filter (isnotnull(year_total#41394) AND (year_total#41394 > 0.0))
         :     :  :        +- HashAggregate(keys=[c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30], functions=[sum(ss_net_paid#1268)], output=[customer_id#41390, year_total#41394])
         :     :  :           +- Exchange hashpartitioning(c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30, 200), ENSURE_REQUIREMENTS, [plan_id=143652]
         :     :  :              +- HashAggregate(keys=[c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30], functions=[partial_sum(ss_net_paid#1268)], output=[c_customer_id#82, c_first_name#89, c_last_name#90, d_year#30, sum#43361])
         :     :  :                 +- Project [c_customer_id#82, c_first_name#89, c_last_name#90, ss_net_paid#1268, d_year#30]
         :     :  :                    +- BroadcastHashJoin [ss_sold_date_sk#1248], [d_date_sk#24], Inner, BuildRight, false
         :     :  :                       :- Project [c_customer_id#82, c_first_name#89, c_last_name#90, ss_sold_date_sk#1248, ss_net_paid#1268]
         :     :  :                       :  +- BroadcastHashJoin [c_customer_sk#81], [ss_customer_sk#1251], Inner, BuildLeft, false
         :     :  :                       :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143643]
         :     :  :                       :     :  +- Filter (isnotnull(c_customer_sk#81) AND isnotnull(c_customer_id#82))
         :     :  :                       :     :     +- FileScan parquet spark_catalog.m.customer[c_customer_sk#81,c_customer_id#82,c_first_name#89,c_last_name#90] Batched: true, DataFilters: [isnotnull(c_customer_sk#81), isnotnull(c_customer_id#82)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
         :     :  :                       :     +- Filter (isnotnull(ss_customer_sk#1251) AND isnotnull(ss_sold_date_sk#1248))
         :     :  :                       :        +- FileScan parquet spark_catalog.m.store_sales[ss_sold_date_sk#1248,ss_customer_sk#1251,ss_net_paid#1268] Batched: true, DataFilters: [isnotnull(ss_customer_sk#1251), isnotnull(ss_sold_date_sk#1248)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:double>
         :     :  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143647]
         :     :  :                          +- Filter (((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND d_year#30 IN (2000,2001)) AND isnotnull(d_date_sk#24))
         :     :  :                             +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), d_year#30 IN (2000,2001), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), In(d_year, [2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     :  +- Sort [customer_id#41452 ASC NULLS FIRST], false, 0
         :     :     +- Exchange hashpartitioning(customer_id#41452, 200), ENSURE_REQUIREMENTS, [plan_id=143669]
         :     :        +- HashAggregate(keys=[c_customer_id#43393, c_first_name#43400, c_last_name#43401, d_year#43439], functions=[sum(ss_net_paid#43430)], output=[customer_id#41452, customer_first_name#41453, customer_last_name#41454, year_total#41456])
         :     :           +- Exchange hashpartitioning(c_customer_id#43393, c_first_name#43400, c_last_name#43401, d_year#43439, 200), ENSURE_REQUIREMENTS, [plan_id=143664]
         :     :              +- HashAggregate(keys=[c_customer_id#43393, c_first_name#43400, c_last_name#43401, d_year#43439], functions=[partial_sum(ss_net_paid#43430)], output=[c_customer_id#43393, c_first_name#43400, c_last_name#43401, d_year#43439, sum#43876])
         :     :                 +- Project [c_customer_id#43393, c_first_name#43400, c_last_name#43401, ss_net_paid#43430, d_year#43439]
         :     :                    +- BroadcastHashJoin [ss_sold_date_sk#43410], [d_date_sk#43433], Inner, BuildRight, false
         :     :                       :- Project [c_customer_id#43393, c_first_name#43400, c_last_name#43401, ss_sold_date_sk#43410, ss_net_paid#43430]
         :     :                       :  +- BroadcastHashJoin [c_customer_sk#43392], [ss_customer_sk#43413], Inner, BuildLeft, false
         :     :                       :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143655]
         :     :                       :     :  +- Filter (isnotnull(c_customer_sk#43392) AND isnotnull(c_customer_id#43393))
         :     :                       :     :     +- FileScan parquet spark_catalog.m.customer[c_customer_sk#43392,c_customer_id#43393,c_first_name#43400,c_last_name#43401] Batched: true, DataFilters: [isnotnull(c_customer_sk#43392), isnotnull(c_customer_id#43393)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
         :     :                       :     +- Filter (isnotnull(ss_customer_sk#43413) AND isnotnull(ss_sold_date_sk#43410))
         :     :                       :        +- FileScan parquet spark_catalog.m.store_sales[ss_sold_date_sk#43410,ss_customer_sk#43413,ss_net_paid#43430] Batched: true, DataFilters: [isnotnull(ss_customer_sk#43413), isnotnull(ss_sold_date_sk#43410)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:double>
         :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143659]
         :     :                          +- Filter (((isnotnull(d_year#43439) AND (d_year#43439 = 2001)) AND d_year#43439 IN (2000,2001)) AND isnotnull(d_date_sk#43433))
         :     :                             +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#43433,d_year#43439] Batched: true, DataFilters: [isnotnull(d_year#43439), (d_year#43439 = 2001), d_year#43439 IN (2000,2001), isnotnull(d_date_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :     +- Sort [customer_id#41396 ASC NULLS FIRST], false, 0
         :        +- Exchange hashpartitioning(customer_id#41396, 200), ENSURE_REQUIREMENTS, [plan_id=143687]
         :           +- Filter (isnotnull(year_total#41400) AND (year_total#41400 > 0.0))
         :              +- HashAggregate(keys=[c_customer_id#43617, c_first_name#43624, c_last_name#43625, d_year#43674], functions=[sum(ws_net_paid#43663)], output=[customer_id#41396, year_total#41400])
         :                 +- Exchange hashpartitioning(c_customer_id#43617, c_first_name#43624, c_last_name#43625, d_year#43674, 200), ENSURE_REQUIREMENTS, [plan_id=143682]
         :                    +- HashAggregate(keys=[c_customer_id#43617, c_first_name#43624, c_last_name#43625, d_year#43674], functions=[partial_sum(ws_net_paid#43663)], output=[c_customer_id#43617, c_first_name#43624, c_last_name#43625, d_year#43674, sum#43878])
         :                       +- Project [c_customer_id#43617, c_first_name#43624, c_last_name#43625, ws_net_paid#43663, d_year#43674]
         :                          +- BroadcastHashJoin [ws_sold_date_sk#43634], [d_date_sk#43668], Inner, BuildRight, false
         :                             :- Project [c_customer_id#43617, c_first_name#43624, c_last_name#43625, ws_sold_date_sk#43634, ws_net_paid#43663]
         :                             :  +- BroadcastHashJoin [c_customer_sk#43616], [ws_bill_customer_sk#43638], Inner, BuildLeft, false
         :                             :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143673]
         :                             :     :  +- Filter (isnotnull(c_customer_sk#43616) AND isnotnull(c_customer_id#43617))
         :                             :     :     +- FileScan parquet spark_catalog.m.customer[c_customer_sk#43616,c_customer_id#43617,c_first_name#43624,c_last_name#43625] Batched: true, DataFilters: [isnotnull(c_customer_sk#43616), isnotnull(c_customer_id#43617)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
         :                             :     +- Filter (isnotnull(ws_bill_customer_sk#43638) AND isnotnull(ws_sold_date_sk#43634))
         :                             :        +- FileScan parquet spark_catalog.m.web_sales[ws_sold_date_sk#43634,ws_bill_customer_sk#43638,ws_net_paid#43663] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#43638), isnotnull(ws_sold_date_sk#43634)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:double>
         :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143677]
         :                                +- Filter (((isnotnull(d_year#43674) AND (d_year#43674 = 2000)) AND d_year#43674 IN (2000,2001)) AND isnotnull(d_date_sk#43668))
         :                                   +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#43668,d_year#43674] Batched: true, DataFilters: [isnotnull(d_year#43674), (d_year#43674 = 2000), d_year#43674 IN (2000,2001), isnotnull(d_date_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), In(d_year, [2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         +- Sort [customer_id#41464 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(customer_id#41464, 200), ENSURE_REQUIREMENTS, [plan_id=143704]
               +- HashAggregate(keys=[c_customer_id#43772, c_first_name#43779, c_last_name#43780, d_year#43829], functions=[sum(ws_net_paid#43818)], output=[customer_id#41464, year_total#41468])
                  +- Exchange hashpartitioning(c_customer_id#43772, c_first_name#43779, c_last_name#43780, d_year#43829, 200), ENSURE_REQUIREMENTS, [plan_id=143700]
                     +- HashAggregate(keys=[c_customer_id#43772, c_first_name#43779, c_last_name#43780, d_year#43829], functions=[partial_sum(ws_net_paid#43818)], output=[c_customer_id#43772, c_first_name#43779, c_last_name#43780, d_year#43829, sum#43880])
                        +- Project [c_customer_id#43772, c_first_name#43779, c_last_name#43780, ws_net_paid#43818, d_year#43829]
                           +- BroadcastHashJoin [ws_sold_date_sk#43789], [d_date_sk#43823], Inner, BuildRight, false
                              :- Project [c_customer_id#43772, c_first_name#43779, c_last_name#43780, ws_sold_date_sk#43789, ws_net_paid#43818]
                              :  +- BroadcastHashJoin [c_customer_sk#43771], [ws_bill_customer_sk#43793], Inner, BuildLeft, false
                              :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143691]
                              :     :  +- Filter (isnotnull(c_customer_sk#43771) AND isnotnull(c_customer_id#43772))
                              :     :     +- FileScan parquet spark_catalog.m.customer[c_customer_sk#43771,c_customer_id#43772,c_first_name#43779,c_last_name#43780] Batched: true, DataFilters: [isnotnull(c_customer_sk#43771), isnotnull(c_customer_id#43772)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>
                              :     +- Filter (isnotnull(ws_bill_customer_sk#43793) AND isnotnull(ws_sold_date_sk#43789))
                              :        +- FileScan parquet spark_catalog.m.web_sales[ws_sold_date_sk#43789,ws_bill_customer_sk#43793,ws_net_paid#43818] Batched: true, DataFilters: [isnotnull(ws_bill_customer_sk#43793), isnotnull(ws_sold_date_sk#43789)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:double>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=143695]
                                 +- Filter (((isnotnull(d_year#43829) AND (d_year#43829 = 2001)) AND d_year#43829 IN (2000,2001)) AND isnotnull(d_date_sk#43823))
                                    +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#43823,d_year#43829] Batched: true, DataFilters: [isnotnull(d_year#43829), (d_year#43829 = 2001), d_year#43829 IN (2000,2001), isnotnull(d_date_sk..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2000,2001]), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
