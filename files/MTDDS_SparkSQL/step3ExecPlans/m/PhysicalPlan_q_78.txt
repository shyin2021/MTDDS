AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[ss_customer_sk#1251 ASC NULLS FIRST,ss_qty#46239L DESC NULLS LAST,ss_wc#46240 DESC NULLS LAST,ss_sp#46241 DESC NULLS LAST,other_chan_qty#46225L ASC NULLS FIRST,other_chan_wholesale_cost#46226 ASC NULLS FIRST,other_chan_sales_price#46227 ASC NULLS FIRST,ratio#46221 ASC NULLS FIRST], output=[ss_customer_sk#1251,ratio#46221,store_qty#46222L,store_wholesale_cost#46223,store_sales_price#46224,other_chan_qty#46225L,other_chan_wholesale_cost#46226,other_chan_sales_price#46227])
   +- Project [ss_customer_sk#1251, round((cast(ss_qty#46239L as double) / cast((coalesce(ws_qty#46230L, 0) + coalesce(cs_qty#46235L, 0)) as double)), 2) AS ratio#46221, ss_qty#46239L AS store_qty#46222L, ss_wc#46240 AS store_wholesale_cost#46223, ss_sp#46241 AS store_sales_price#46224, (coalesce(ws_qty#46230L, 0) + coalesce(cs_qty#46235L, 0)) AS other_chan_qty#46225L, (coalesce(ws_wc#46231, 0.0) + coalesce(cs_wc#46236, 0.0)) AS other_chan_wholesale_cost#46226, (coalesce(ws_sp#46232, 0.0) + coalesce(cs_sp#46237, 0.0)) AS other_chan_sales_price#46227, ss_qty#46239L, ss_wc#46240, ss_sp#46241]
      +- Filter ((coalesce(ws_qty#46230L, 0) > 0) OR (coalesce(cs_qty#46235L, 0) > 0))
         +- SortMergeJoin [ss_sold_year#46238, ss_item_sk#1250, ss_customer_sk#1251], [cs_sold_year#46233, cs_item_sk#476, cs_customer_sk#46234], LeftOuter
            :- Project [ss_sold_year#46238, ss_item_sk#1250, ss_customer_sk#1251, ss_qty#46239L, ss_wc#46240, ss_sp#46241, ws_qty#46230L, ws_wc#46231, ws_sp#46232]
            :  +- SortMergeJoin [ss_sold_year#46238, ss_item_sk#1250, ss_customer_sk#1251], [ws_sold_year#46228, ws_item_sk#430, ws_customer_sk#46229], LeftOuter
            :     :- Sort [ss_sold_year#46238 ASC NULLS FIRST, ss_item_sk#1250 ASC NULLS FIRST, ss_customer_sk#1251 ASC NULLS FIRST], false, 0
            :     :  +- HashAggregate(keys=[d_year#46276, ss_item_sk#1250, ss_customer_sk#1251], functions=[sum(ss_quantity#1258), sum(ss_wholesale_cost#1259), sum(ss_sales_price#1261)], output=[ss_sold_year#46238, ss_item_sk#1250, ss_customer_sk#1251, ss_qty#46239L, ss_wc#46240, ss_sp#46241])
            :     :     +- Exchange hashpartitioning(d_year#46276, ss_item_sk#1250, ss_customer_sk#1251, 200), ENSURE_REQUIREMENTS, [plan_id=153223]
            :     :        +- HashAggregate(keys=[d_year#46276, ss_item_sk#1250, ss_customer_sk#1251], functions=[partial_sum(ss_quantity#1258), partial_sum(ss_wholesale_cost#1259), partial_sum(ss_sales_price#1261)], output=[d_year#46276, ss_item_sk#1250, ss_customer_sk#1251, sum#46344L, sum#46345, sum#46346])
            :     :           +- Project [ss_item_sk#1250, ss_customer_sk#1251, ss_quantity#1258, ss_wholesale_cost#1259, ss_sales_price#1261, d_year#46276]
            :     :              +- BroadcastHashJoin [ss_sold_date_sk#1248], [d_date_sk#46270], Inner, BuildRight, false
            :     :                 :- Project [ss_sold_date_sk#1248, ss_item_sk#1250, ss_customer_sk#1251, ss_quantity#1258, ss_wholesale_cost#1259, ss_sales_price#1261]
            :     :                 :  +- Filter isnull(sr_ticket_number#13)
            :     :                 :     +- BroadcastHashJoin [ss_ticket_number#1257, ss_item_sk#1250], [sr_ticket_number#13, sr_item_sk#6], LeftOuter, BuildRight, false
            :     :                 :        :- Filter isnotnull(ss_sold_date_sk#1248)
            :     :                 :        :  +- FileScan parquet spark_catalog.m.store_sales[ss_sold_date_sk#1248,ss_item_sk#1250,ss_customer_sk#1251,ss_ticket_number#1257,ss_quantity#1258,ss_wholesale_cost#1259,ss_sales_price#1261] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#1248)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int...
            :     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=153213]
            :     :                 :           +- Filter (isnotnull(sr_ticket_number#13) AND isnotnull(sr_item_sk#6))
            :     :                 :              +- FileScan parquet spark_catalog.m.store_returns[sr_item_sk#6,sr_ticket_number#13] Batched: true, DataFilters: [isnotnull(sr_ticket_number#13), isnotnull(sr_item_sk#6)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/store_returns], PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>
            :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=153218]
            :     :                    +- Filter ((isnotnull(d_year#46276) AND (d_year#46276 = 1999)) AND isnotnull(d_date_sk#46270))
            :     :                       +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#46270,d_year#46276] Batched: true, DataFilters: [isnotnull(d_year#46276), (d_year#46276 = 1999), isnotnull(d_date_sk#46270)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
            :     +- Sort [ws_sold_year#46228 ASC NULLS FIRST, ws_item_sk#430 ASC NULLS FIRST, ws_customer_sk#46229 ASC NULLS FIRST], false, 0
            :        +- HashAggregate(keys=[d_year#30, ws_item_sk#430, ws_bill_customer_sk#431], functions=[sum(ws_quantity#445), sum(ws_wholesale_cost#446), sum(ws_sales_price#448)], output=[ws_sold_year#46228, ws_item_sk#430, ws_customer_sk#46229, ws_qty#46230L, ws_wc#46231, ws_sp#46232])
            :           +- Exchange hashpartitioning(d_year#30, ws_item_sk#430, ws_bill_customer_sk#431, 200), ENSURE_REQUIREMENTS, [plan_id=153235]
            :              +- HashAggregate(keys=[d_year#30, ws_item_sk#430, ws_bill_customer_sk#431], functions=[partial_sum(ws_quantity#445), partial_sum(ws_wholesale_cost#446), partial_sum(ws_sales_price#448)], output=[d_year#30, ws_item_sk#430, ws_bill_customer_sk#431, sum#46350L, sum#46351, sum#46352])
            :                 +- Project [ws_item_sk#430, ws_bill_customer_sk#431, ws_quantity#445, ws_wholesale_cost#446, ws_sales_price#448, d_year#30]
            :                    +- BroadcastHashJoin [ws_sold_date_sk#427], [d_date_sk#24], Inner, BuildRight, false
            :                       :- Project [ws_sold_date_sk#427, ws_item_sk#430, ws_bill_customer_sk#431, ws_quantity#445, ws_wholesale_cost#446, ws_sales_price#448]
            :                       :  +- Filter isnull(wr_order_number#7860)
            :                       :     +- BroadcastHashJoin [ws_order_number#444, ws_item_sk#430], [wr_order_number#7860, wr_item_sk#7849], LeftOuter, BuildRight, false
            :                       :        :- Filter ((isnotnull(ws_sold_date_sk#427) AND isnotnull(ws_item_sk#430)) AND isnotnull(ws_bill_customer_sk#431))
            :                       :        :  +- FileScan parquet spark_catalog.m.web_sales[ws_sold_date_sk#427,ws_item_sk#430,ws_bill_customer_sk#431,ws_order_number#444,ws_quantity#445,ws_wholesale_cost#446,ws_sales_price#448] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#427), isnotnull(ws_item_sk#430), isnotnull(ws_bill_customer_sk#431)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity...
            :                       :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=153225]
            :                       :           +- Filter (isnotnull(wr_order_number#7860) AND isnotnull(wr_item_sk#7849))
            :                       :              +- FileScan parquet spark_catalog.m.web_returns[wr_item_sk#7849,wr_order_number#7860] Batched: true, DataFilters: [isnotnull(wr_order_number#7860), isnotnull(wr_item_sk#7849)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)], ReadSchema: struct<wr_item_sk:int,wr_order_number:int>
            :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=153230]
            :                          +- Filter ((isnotnull(d_date_sk#24) AND (d_year#30 = 1999)) AND isnotnull(d_year#30))
            :                             +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_date_sk#24), (d_year#30 = 1999), isnotnull(d_year#30)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), EqualTo(d_year,1999), IsNotNull(d_year)], ReadSchema: struct<d_date_sk:int,d_year:int>
            +- Sort [cs_sold_year#46233 ASC NULLS FIRST, cs_item_sk#476 ASC NULLS FIRST, cs_customer_sk#46234 ASC NULLS FIRST], false, 0
               +- HashAggregate(keys=[d_year#46248, cs_item_sk#476, cs_bill_customer_sk#464], functions=[sum(cs_quantity#479), sum(cs_wholesale_cost#480), sum(cs_sales_price#482)], output=[cs_sold_year#46233, cs_item_sk#476, cs_customer_sk#46234, cs_qty#46235L, cs_wc#46236, cs_sp#46237])
                  +- Exchange hashpartitioning(d_year#46248, cs_item_sk#476, cs_bill_customer_sk#464, 200), ENSURE_REQUIREMENTS, [plan_id=153253]
                     +- HashAggregate(keys=[d_year#46248, cs_item_sk#476, cs_bill_customer_sk#464], functions=[partial_sum(cs_quantity#479), partial_sum(cs_wholesale_cost#480), partial_sum(cs_sales_price#482)], output=[d_year#46248, cs_item_sk#476, cs_bill_customer_sk#464, sum#46356L, sum#46357, sum#46358])
                        +- Project [cs_bill_customer_sk#464, cs_item_sk#476, cs_quantity#479, cs_wholesale_cost#480, cs_sales_price#482, d_year#46248]
                           +- BroadcastHashJoin [cs_sold_date_sk#461], [d_date_sk#46242], Inner, BuildRight, false
                              :- Project [cs_sold_date_sk#461, cs_bill_customer_sk#464, cs_item_sk#476, cs_quantity#479, cs_wholesale_cost#480, cs_sales_price#482]
                              :  +- Filter isnull(cr_order_number#7827)
                              :     +- BroadcastHashJoin [cs_order_number#478, cs_item_sk#476], [cr_order_number#7827, cr_item_sk#7813], LeftOuter, BuildRight, false
                              :        :- Filter ((isnotnull(cs_sold_date_sk#461) AND isnotnull(cs_item_sk#476)) AND isnotnull(cs_bill_customer_sk#464))
                              :        :  +- FileScan parquet spark_catalog.m.catalog_sales[cs_sold_date_sk#461,cs_bill_customer_sk#464,cs_item_sk#476,cs_order_number#478,cs_quantity#479,cs_wholesale_cost#480,cs_sales_price#482] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#461), isnotnull(cs_item_sk#476), isnotnull(cs_bill_customer_sk#464)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/catalog_sales], PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity...
                              :        +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [plan_id=153243]
                              :           +- Filter (isnotnull(cr_order_number#7827) AND isnotnull(cr_item_sk#7813))
                              :              +- FileScan parquet spark_catalog.m.catalog_returns[cr_item_sk#7813,cr_order_number#7827] Batched: true, DataFilters: [isnotnull(cr_order_number#7827), isnotnull(cr_item_sk#7813)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/catalog_returns], PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:int>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=153248]
                                 +- Filter ((isnotnull(d_date_sk#46242) AND (d_year#46248 = 1999)) AND isnotnull(d_year#46248))
                                    +- FileScan parquet spark_catalog.m.date_dim[d_date_sk#46242,d_year#46248] Batched: true, DataFilters: [isnotnull(d_date_sk#46242), (d_year#46248 = 1999), isnotnull(d_year#46248)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://gros-121:9000/usr/spark/spark-warehouse/m.db/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), EqualTo(d_year,1999), IsNotNull(d_year)], ReadSchema: struct<d_date_sk:int,d_year:int>
