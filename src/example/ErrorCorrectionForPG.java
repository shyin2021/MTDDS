package example;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class ErrorCorrectionForPG {
	
	private static final Integer[] errorLines = {251, 282, 315, 715, 1025, 1164, 1196, 1197, 1727, 1739, 1947, 2053, 2054, 3930, 3943, 3954, 3965, 3977, 3989, 4123, 4144, 4165, 4244, 4660, 4672, 4709, 4743, 4817,
			36, 815, 1248, 1276, 1297, 1330, 1934, 2486, 3663, 4017, 4446, 4538};
	
	public static void fixSyntaxErrors(String input_file, String output_file){
		BufferedReader queriesReader;
		FileWriter queriesWriter = null;
		String row = null;
		int rowNumber = 0;
		
		// create and open the output file
		try{
			queriesWriter = new FileWriter(output_file);
		} catch (IOException e1){
			e1.printStackTrace();
		}
		
		List<Integer> listErrorLines = Arrays.asList(errorLines);
		
		try{
			queriesReader = new BufferedReader(new FileReader(input_file));
			while((row = queriesReader.readLine()) != null){
				rowNumber++;
				if(!listErrorLines.contains(rowNumber)) {
					// copy the line into the output file
					queriesWriter.append(row + "\n");
				} else {
					switch(rowNumber) {
						case 36:
							row = new StringBuilder(row).insert(row.length()-2, " r1").toString();
							queriesWriter.append(row + "\n");
							break;
						case 815:
							queriesWriter.append(row + " r2\n");
							break;
						case 1248:
							row = new StringBuilder(row).insert(row.length()-2, " r3").toString();
							queriesWriter.append(row + "\n");
							break;
						case 1276:
							queriesWriter.append(row + " r4\n");
							break;
						case 1297:
							row = new StringBuilder(row).insert(row.length()-2, " r5").toString();
							queriesWriter.append(row + "\n");
							break;
						case 1330:
							queriesWriter.append(row + " r6\n");
							break;
						case 2486:
							queriesWriter.append(row + " r7\n");
							break;
						case 1934:
							row = row.replace("lochierarchy", "grouping(i_category)+grouping(i_class)");
							queriesWriter.append(row + "\n");
							break;
						case 3663:
							row = row.replace("lochierarchy", "grouping(s_state)+grouping(s_county)");
							queriesWriter.append(row + "\n");
							break;
						case 4535:
						case 4446:
							row = row.replace("lochierarchy", "grouping(i_category)+grouping(i_class)");
							queriesWriter.append(row + "\n");
							break;
						case 4017:
							row = new StringBuilder(row).insert(row.length()-7, "as ").toString();
							queriesWriter.append(row + "\n");
							break;
						default:
							row = row.replace(" days", "");
							queriesWriter.append(row + "\n");
							break;
					}
					
				}
			}
			queriesWriter.flush();
			queriesWriter.close();
			queriesReader.close();			
		} catch (IOException e2){
			e2.printStackTrace();
		}
	}
	
	public static void main(String[] args){
		// args[0]: original query file generated by TPD-DS tool-kit
		// args[1]: query file after correcting syntax errors suggested by Postgres
		fixSyntaxErrors(args[0], args[1]);
	}
}
